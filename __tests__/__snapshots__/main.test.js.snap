// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`archived_at schema matches snapshot 1`] = `
type Child implements Node {
  archivedAt: Datetime
  id: Int!
  isArchived: Boolean!
  isPublished: Boolean!
  name: String

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads a single \`Organization\` that is related to this \`Child\`."""
  organizationByOrganizationId: Organization
  organizationId: Int!

  """Reads a single \`Parent\` that is related to this \`Child\`."""
  parentByParentId: Parent
  parentId: Int!
  publishedAt: Datetime
  status: String!
}

"""
A condition to be used against \`Child\` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ChildCondition {
  """Checks for equality with the object’s \`archivedAt\` field."""
  archivedAt: Datetime

  """Checks for equality with the object’s \`id\` field."""
  id: Int

  """Checks for equality with the object’s \`isArchived\` field."""
  isArchived: Boolean

  """Checks for equality with the object’s \`isPublished\` field."""
  isPublished: Boolean

  """Checks for equality with the object’s \`name\` field."""
  name: String

  """Checks for equality with the object’s \`organizationId\` field."""
  organizationId: Int

  """Checks for equality with the object’s \`parentId\` field."""
  parentId: Int

  """Checks for equality with the object’s \`publishedAt\` field."""
  publishedAt: Datetime

  """Checks for equality with the object’s \`status\` field."""
  status: String
}

"""An input for mutations affecting \`Child\`"""
input ChildInput {
  archivedAt: Datetime
  id: Int!
  isArchived: Boolean
  isPublished: Boolean
  name: String
  organizationId: Int!
  parentId: Int!
  publishedAt: Datetime
  status: String!
}

"""
Represents an update to a \`Child\`. Fields that are set will be updated.
"""
input ChildPatch {
  archivedAt: Datetime
  id: Int
  isArchived: Boolean
  isPublished: Boolean
  name: String
  organizationId: Int
  parentId: Int
  publishedAt: Datetime
  status: String
}

"""A connection to a list of \`Child\` values."""
type ChildrenConnection {
  """
  A list of edges which contains the \`Child\` and cursor to aid in pagination.
  """
  edges: [ChildrenEdge!]!

  """A list of \`Child\` objects."""
  nodes: [Child]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* \`Child\` you could get from the connection."""
  totalCount: Int!
}

"""A \`Child\` edge in the connection."""
type ChildrenEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The \`Child\` at the end of the edge."""
  node: Child
}

"""Methods to use when ordering \`Child\`."""
enum ChildrenOrderBy {
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  ID_ASC
  ID_DESC
  IS_ARCHIVED_ASC
  IS_ARCHIVED_DESC
  IS_PUBLISHED_ASC
  IS_PUBLISHED_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  ORGANIZATION_ID_ASC
  ORGANIZATION_ID_DESC
  PARENT_ID_ASC
  PARENT_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PUBLISHED_AT_ASC
  PUBLISHED_AT_DESC
  STATUS_ASC
  STATUS_DESC
}

"""All input for the create \`Child\` mutation."""
input CreateChildInput {
  """The \`Child\` to be created by this mutation."""
  child: ChildInput!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our create \`Child\` mutation."""
type CreateChildPayload {
  """The \`Child\` that was created by this mutation."""
  child: Child

  """An edge for our \`Child\`. May be used by Relay 1."""
  childEdge(
    """The method to use when ordering \`Child\`."""
    orderBy: [ChildrenOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChildrenEdge

  """
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single \`Organization\` that is related to this \`Child\`."""
  organizationByOrganizationId: Organization

  """Reads a single \`Parent\` that is related to this \`Child\`."""
  parentByParentId: Parent

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create \`Organization\` mutation."""
input CreateOrganizationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The \`Organization\` to be created by this mutation."""
  organization: OrganizationInput!
}

"""The output of our create \`Organization\` mutation."""
type CreateOrganizationPayload {
  """
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The \`Organization\` that was created by this mutation."""
  organization: Organization

  """An edge for our \`Organization\`. May be used by Relay 1."""
  organizationEdge(
    """The method to use when ordering \`Organization\`."""
    orderBy: [OrganizationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganizationsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create \`OtherChild\` mutation."""
input CreateOtherChildInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The \`OtherChild\` to be created by this mutation."""
  otherChild: OtherChildInput!
}

"""The output of our create \`OtherChild\` mutation."""
type CreateOtherChildPayload {
  """
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The \`OtherChild\` that was created by this mutation."""
  otherChild: OtherChild

  """An edge for our \`OtherChild\`. May be used by Relay 1."""
  otherChildEdge(
    """The method to use when ordering \`OtherChild\`."""
    orderBy: [OtherChildrenOrderBy!] = [PRIMARY_KEY_ASC]
  ): OtherChildrenEdge

  """Reads a single \`Parent\` that is related to this \`OtherChild\`."""
  parentByParentId: Parent

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create \`Parent\` mutation."""
input CreateParentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The \`Parent\` to be created by this mutation."""
  parent: ParentInput!
}

"""The output of our create \`Parent\` mutation."""
type CreateParentPayload {
  """
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The \`Parent\` that was created by this mutation."""
  parent: Parent

  """An edge for our \`Parent\`. May be used by Relay 1."""
  parentEdge(
    """The method to use when ordering \`Parent\`."""
    orderBy: [ParentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ParentsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

"""All input for the \`deleteChildById\` mutation."""
input DeleteChildByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the \`deleteChild\` mutation."""
input DeleteChildInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique \`ID\` which will identify a single \`Child\` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete \`Child\` mutation."""
type DeleteChildPayload {
  """The \`Child\` that was deleted by this mutation."""
  child: Child

  """An edge for our \`Child\`. May be used by Relay 1."""
  childEdge(
    """The method to use when ordering \`Child\`."""
    orderBy: [ChildrenOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChildrenEdge

  """
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedChildId: ID

  """Reads a single \`Organization\` that is related to this \`Child\`."""
  organizationByOrganizationId: Organization

  """Reads a single \`Parent\` that is related to this \`Child\`."""
  parentByParentId: Parent

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the \`deleteOrganizationById\` mutation."""
input DeleteOrganizationByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the \`deleteOrganization\` mutation."""
input DeleteOrganizationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique \`ID\` which will identify a single \`Organization\` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete \`Organization\` mutation."""
type DeleteOrganizationPayload {
  """
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedOrganizationId: ID

  """The \`Organization\` that was deleted by this mutation."""
  organization: Organization

  """An edge for our \`Organization\`. May be used by Relay 1."""
  organizationEdge(
    """The method to use when ordering \`Organization\`."""
    orderBy: [OrganizationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganizationsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the \`deleteOtherChildById\` mutation."""
input DeleteOtherChildByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the \`deleteOtherChild\` mutation."""
input DeleteOtherChildInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique \`ID\` which will identify a single \`OtherChild\` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete \`OtherChild\` mutation."""
type DeleteOtherChildPayload {
  """
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedOtherChildId: ID

  """The \`OtherChild\` that was deleted by this mutation."""
  otherChild: OtherChild

  """An edge for our \`OtherChild\`. May be used by Relay 1."""
  otherChildEdge(
    """The method to use when ordering \`OtherChild\`."""
    orderBy: [OtherChildrenOrderBy!] = [PRIMARY_KEY_ASC]
  ): OtherChildrenEdge

  """Reads a single \`Parent\` that is related to this \`OtherChild\`."""
  parentByParentId: Parent

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the \`deleteParentById\` mutation."""
input DeleteParentByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the \`deleteParent\` mutation."""
input DeleteParentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique \`ID\` which will identify a single \`Parent\` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete \`Parent\` mutation."""
type DeleteParentPayload {
  """
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedParentId: ID

  """The \`Parent\` that was deleted by this mutation."""
  parent: Parent

  """An edge for our \`Parent\`. May be used by Relay 1."""
  parentEdge(
    """The method to use when ordering \`Parent\`."""
    orderBy: [ParentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ParentsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
Indicates whether archived items should be included in the results or not.
"""
enum IncludeArchivedOption {
  """Only include archived items (i.e. exclude non-archived items)."""
  EXCLUSIVELY

  """
  If there is a parent GraphQL record and it is archived then this is equivalent
  to YES, in all other cases this is equivalent to NO.
  """
  INHERIT

  """Exclude archived items."""
  NO

  """Include archived items."""
  YES
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single \`Child\`."""
  createChild(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateChildInput!
  ): CreateChildPayload

  """Creates a single \`Organization\`."""
  createOrganization(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateOrganizationInput!
  ): CreateOrganizationPayload

  """Creates a single \`OtherChild\`."""
  createOtherChild(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateOtherChildInput!
  ): CreateOtherChildPayload

  """Creates a single \`Parent\`."""
  createParent(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateParentInput!
  ): CreateParentPayload

  """Deletes a single \`Child\` using its globally unique id."""
  deleteChild(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteChildInput!
  ): DeleteChildPayload

  """Deletes a single \`Child\` using a unique key."""
  deleteChildById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteChildByIdInput!
  ): DeleteChildPayload

  """Deletes a single \`Organization\` using its globally unique id."""
  deleteOrganization(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOrganizationInput!
  ): DeleteOrganizationPayload

  """Deletes a single \`Organization\` using a unique key."""
  deleteOrganizationById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOrganizationByIdInput!
  ): DeleteOrganizationPayload

  """Deletes a single \`OtherChild\` using its globally unique id."""
  deleteOtherChild(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOtherChildInput!
  ): DeleteOtherChildPayload

  """Deletes a single \`OtherChild\` using a unique key."""
  deleteOtherChildById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOtherChildByIdInput!
  ): DeleteOtherChildPayload

  """Deletes a single \`Parent\` using its globally unique id."""
  deleteParent(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteParentInput!
  ): DeleteParentPayload

  """Deletes a single \`Parent\` using a unique key."""
  deleteParentById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteParentByIdInput!
  ): DeleteParentPayload

  """Updates a single \`Child\` using its globally unique id and a patch."""
  updateChild(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateChildInput!
  ): UpdateChildPayload

  """Updates a single \`Child\` using a unique key and a patch."""
  updateChildById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateChildByIdInput!
  ): UpdateChildPayload

  """
  Updates a single \`Organization\` using its globally unique id and a patch.
  """
  updateOrganization(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOrganizationInput!
  ): UpdateOrganizationPayload

  """Updates a single \`Organization\` using a unique key and a patch."""
  updateOrganizationById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOrganizationByIdInput!
  ): UpdateOrganizationPayload

  """
  Updates a single \`OtherChild\` using its globally unique id and a patch.
  """
  updateOtherChild(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOtherChildInput!
  ): UpdateOtherChildPayload

  """Updates a single \`OtherChild\` using a unique key and a patch."""
  updateOtherChildById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOtherChildByIdInput!
  ): UpdateOtherChildPayload

  """Updates a single \`Parent\` using its globally unique id and a patch."""
  updateParent(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateParentInput!
  ): UpdateParentPayload

  """Updates a single \`Parent\` using a unique key and a patch."""
  updateParentById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateParentByIdInput!
  ): UpdateParentPayload
}

"""An object with a globally unique \`ID\`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

type Organization implements Node {
  archivedAt: Datetime

  """Reads and enables pagination through a set of \`Child\`."""
  childrenByOrganizationId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChildCondition

    """Only read the first \`n\` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeWhenOrganizationByOrganizationIdArchived: IncludeArchivedOption = INHERIT

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeWhenParentByParentIdArchived: IncludeArchivedOption = INHERIT

    """Only read the last \`n\` values of the set."""
    last: Int

    """
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    """
    offset: Int

    """The method to use when ordering \`Child\`."""
    orderBy: [ChildrenOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChildrenConnection!

  """Reads and enables pagination through a set of \`Child\`."""
  childrenByOrganizationIdList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChildCondition

    """Only read the first \`n\` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeWhenOrganizationByOrganizationIdArchived: IncludeArchivedOption = INHERIT

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeWhenParentByParentIdArchived: IncludeArchivedOption = INHERIT

    """Skip the first \`n\` values."""
    offset: Int

    """The method to use when ordering \`Child\`."""
    orderBy: [ChildrenOrderBy!]
  ): [Child!]!
  id: Int!
  isArchived: Boolean!
  isPublished: Boolean!
  name: String

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  publishedAt: Datetime
  status: String!
}

"""
A condition to be used against \`Organization\` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input OrganizationCondition {
  """Checks for equality with the object’s \`archivedAt\` field."""
  archivedAt: Datetime

  """Checks for equality with the object’s \`id\` field."""
  id: Int

  """Checks for equality with the object’s \`isArchived\` field."""
  isArchived: Boolean

  """Checks for equality with the object’s \`isPublished\` field."""
  isPublished: Boolean

  """Checks for equality with the object’s \`name\` field."""
  name: String

  """Checks for equality with the object’s \`publishedAt\` field."""
  publishedAt: Datetime

  """Checks for equality with the object’s \`status\` field."""
  status: String
}

"""An input for mutations affecting \`Organization\`"""
input OrganizationInput {
  archivedAt: Datetime
  id: Int!
  isArchived: Boolean
  isPublished: Boolean
  name: String
  publishedAt: Datetime
  status: String!
}

"""
Represents an update to a \`Organization\`. Fields that are set will be updated.
"""
input OrganizationPatch {
  archivedAt: Datetime
  id: Int
  isArchived: Boolean
  isPublished: Boolean
  name: String
  publishedAt: Datetime
  status: String
}

"""A connection to a list of \`Organization\` values."""
type OrganizationsConnection {
  """
  A list of edges which contains the \`Organization\` and cursor to aid in pagination.
  """
  edges: [OrganizationsEdge!]!

  """A list of \`Organization\` objects."""
  nodes: [Organization]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* \`Organization\` you could get from the connection."""
  totalCount: Int!
}

"""A \`Organization\` edge in the connection."""
type OrganizationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The \`Organization\` at the end of the edge."""
  node: Organization
}

"""Methods to use when ordering \`Organization\`."""
enum OrganizationsOrderBy {
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  ID_ASC
  ID_DESC
  IS_ARCHIVED_ASC
  IS_ARCHIVED_DESC
  IS_PUBLISHED_ASC
  IS_PUBLISHED_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PUBLISHED_AT_ASC
  PUBLISHED_AT_DESC
  STATUS_ASC
  STATUS_DESC
}

type OtherChild implements Node {
  id: Int!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads a single \`Parent\` that is related to this \`OtherChild\`."""
  parentByParentId: Parent
  parentId: Int!
  title: String
}

"""
A condition to be used against \`OtherChild\` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input OtherChildCondition {
  """Checks for equality with the object’s \`id\` field."""
  id: Int

  """Checks for equality with the object’s \`parentId\` field."""
  parentId: Int

  """Checks for equality with the object’s \`title\` field."""
  title: String
}

"""An input for mutations affecting \`OtherChild\`"""
input OtherChildInput {
  id: Int!
  parentId: Int!
  title: String
}

"""
Represents an update to a \`OtherChild\`. Fields that are set will be updated.
"""
input OtherChildPatch {
  id: Int
  parentId: Int
  title: String
}

"""A connection to a list of \`OtherChild\` values."""
type OtherChildrenConnection {
  """
  A list of edges which contains the \`OtherChild\` and cursor to aid in pagination.
  """
  edges: [OtherChildrenEdge!]!

  """A list of \`OtherChild\` objects."""
  nodes: [OtherChild]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* \`OtherChild\` you could get from the connection."""
  totalCount: Int!
}

"""A \`OtherChild\` edge in the connection."""
type OtherChildrenEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The \`OtherChild\` at the end of the edge."""
  node: OtherChild
}

"""Methods to use when ordering \`OtherChild\`."""
enum OtherChildrenOrderBy {
  ID_ASC
  ID_DESC
  NATURAL
  PARENT_ID_ASC
  PARENT_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  TITLE_ASC
  TITLE_DESC
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
}

type Parent implements Node {
  archivedAt: Datetime

  """Reads and enables pagination through a set of \`Child\`."""
  childrenByParentId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChildCondition

    """Only read the first \`n\` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeWhenOrganizationByOrganizationIdArchived: IncludeArchivedOption = INHERIT

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeWhenParentByParentIdArchived: IncludeArchivedOption = INHERIT

    """Only read the last \`n\` values of the set."""
    last: Int

    """
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    """
    offset: Int

    """The method to use when ordering \`Child\`."""
    orderBy: [ChildrenOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChildrenConnection!

  """Reads and enables pagination through a set of \`Child\`."""
  childrenByParentIdList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChildCondition

    """Only read the first \`n\` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeWhenOrganizationByOrganizationIdArchived: IncludeArchivedOption = INHERIT

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeWhenParentByParentIdArchived: IncludeArchivedOption = INHERIT

    """Skip the first \`n\` values."""
    offset: Int

    """The method to use when ordering \`Child\`."""
    orderBy: [ChildrenOrderBy!]
  ): [Child!]!
  id: Int!
  isArchived: Boolean!
  isPublished: Boolean!
  name: String

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads and enables pagination through a set of \`OtherChild\`."""
  otherChildrenByParentId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OtherChildCondition

    """Only read the first \`n\` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeWhenParentByParentIdArchived: IncludeArchivedOption = INHERIT

    """Only read the last \`n\` values of the set."""
    last: Int

    """
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    """
    offset: Int

    """The method to use when ordering \`OtherChild\`."""
    orderBy: [OtherChildrenOrderBy!] = [PRIMARY_KEY_ASC]
  ): OtherChildrenConnection!

  """Reads and enables pagination through a set of \`OtherChild\`."""
  otherChildrenByParentIdList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OtherChildCondition

    """Only read the first \`n\` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeWhenParentByParentIdArchived: IncludeArchivedOption = INHERIT

    """Skip the first \`n\` values."""
    offset: Int

    """The method to use when ordering \`OtherChild\`."""
    orderBy: [OtherChildrenOrderBy!]
  ): [OtherChild!]!
  publishedAt: Datetime
  status: String!
}

"""
A condition to be used against \`Parent\` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ParentCondition {
  """Checks for equality with the object’s \`archivedAt\` field."""
  archivedAt: Datetime

  """Checks for equality with the object’s \`id\` field."""
  id: Int

  """Checks for equality with the object’s \`isArchived\` field."""
  isArchived: Boolean

  """Checks for equality with the object’s \`isPublished\` field."""
  isPublished: Boolean

  """Checks for equality with the object’s \`name\` field."""
  name: String

  """Checks for equality with the object’s \`publishedAt\` field."""
  publishedAt: Datetime

  """Checks for equality with the object’s \`status\` field."""
  status: String
}

"""An input for mutations affecting \`Parent\`"""
input ParentInput {
  archivedAt: Datetime
  id: Int!
  isArchived: Boolean
  isPublished: Boolean
  name: String
  publishedAt: Datetime
  status: String!
}

"""
Represents an update to a \`Parent\`. Fields that are set will be updated.
"""
input ParentPatch {
  archivedAt: Datetime
  id: Int
  isArchived: Boolean
  isPublished: Boolean
  name: String
  publishedAt: Datetime
  status: String
}

"""A connection to a list of \`Parent\` values."""
type ParentsConnection {
  """
  A list of edges which contains the \`Parent\` and cursor to aid in pagination.
  """
  edges: [ParentsEdge!]!

  """A list of \`Parent\` objects."""
  nodes: [Parent]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* \`Parent\` you could get from the connection."""
  totalCount: Int!
}

"""A \`Parent\` edge in the connection."""
type ParentsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The \`Parent\` at the end of the edge."""
  node: Parent
}

"""Methods to use when ordering \`Parent\`."""
enum ParentsOrderBy {
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  ID_ASC
  ID_DESC
  IS_ARCHIVED_ASC
  IS_ARCHIVED_DESC
  IS_PUBLISHED_ASC
  IS_PUBLISHED_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PUBLISHED_AT_ASC
  PUBLISHED_AT_DESC
  STATUS_ASC
  STATUS_DESC
}

"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """Reads and enables pagination through a set of \`Child\`."""
  allChildren(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChildCondition

    """Only read the first \`n\` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeWhenOrganizationByOrganizationIdArchived: IncludeArchivedOption = NO

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeWhenParentByParentIdArchived: IncludeArchivedOption = NO

    """Only read the last \`n\` values of the set."""
    last: Int

    """
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    """
    offset: Int

    """The method to use when ordering \`Child\`."""
    orderBy: [ChildrenOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChildrenConnection

  """Reads a set of \`Child\`."""
  allChildrenList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChildCondition

    """Only read the first \`n\` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeWhenOrganizationByOrganizationIdArchived: IncludeArchivedOption = NO

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeWhenParentByParentIdArchived: IncludeArchivedOption = NO

    """Skip the first \`n\` values."""
    offset: Int

    """The method to use when ordering \`Child\`."""
    orderBy: [ChildrenOrderBy!]
  ): [Child!]

  """Reads and enables pagination through a set of \`Organization\`."""
  allOrganizations(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OrganizationCondition

    """Only read the first \`n\` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last \`n\` values of the set."""
    last: Int

    """
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    """
    offset: Int

    """The method to use when ordering \`Organization\`."""
    orderBy: [OrganizationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganizationsConnection

  """Reads a set of \`Organization\`."""
  allOrganizationsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OrganizationCondition

    """Only read the first \`n\` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Skip the first \`n\` values."""
    offset: Int

    """The method to use when ordering \`Organization\`."""
    orderBy: [OrganizationsOrderBy!]
  ): [Organization!]

  """Reads and enables pagination through a set of \`OtherChild\`."""
  allOtherChildren(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OtherChildCondition

    """Only read the first \`n\` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeWhenParentByParentIdArchived: IncludeArchivedOption = NO

    """Only read the last \`n\` values of the set."""
    last: Int

    """
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    """
    offset: Int

    """The method to use when ordering \`OtherChild\`."""
    orderBy: [OtherChildrenOrderBy!] = [PRIMARY_KEY_ASC]
  ): OtherChildrenConnection

  """Reads a set of \`OtherChild\`."""
  allOtherChildrenList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OtherChildCondition

    """Only read the first \`n\` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeWhenParentByParentIdArchived: IncludeArchivedOption = NO

    """Skip the first \`n\` values."""
    offset: Int

    """The method to use when ordering \`OtherChild\`."""
    orderBy: [OtherChildrenOrderBy!]
  ): [OtherChild!]

  """Reads and enables pagination through a set of \`Parent\`."""
  allParents(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ParentCondition

    """Only read the first \`n\` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last \`n\` values of the set."""
    last: Int

    """
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    """
    offset: Int

    """The method to use when ordering \`Parent\`."""
    orderBy: [ParentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ParentsConnection

  """Reads a set of \`Parent\`."""
  allParentsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ParentCondition

    """Only read the first \`n\` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Skip the first \`n\` values."""
    offset: Int

    """The method to use when ordering \`Parent\`."""
    orderBy: [ParentsOrderBy!]
  ): [Parent!]

  """Reads a single \`Child\` using its globally unique \`ID\`."""
  child(
    """The globally unique \`ID\` to be used in selecting a single \`Child\`."""
    nodeId: ID!
  ): Child
  childById(id: Int!): Child

  """Fetches an object given its globally unique \`ID\`."""
  node(
    """The globally unique \`ID\`."""
    nodeId: ID!
  ): Node

  """
  The root query type must be a \`Node\` to work well with Relay 1 mutations. This just resolves to \`query\`.
  """
  nodeId: ID!

  """Reads a single \`Organization\` using its globally unique \`ID\`."""
  organization(
    """
    The globally unique \`ID\` to be used in selecting a single \`Organization\`.
    """
    nodeId: ID!
  ): Organization
  organizationById(id: Int!): Organization

  """Reads a single \`OtherChild\` using its globally unique \`ID\`."""
  otherChild(
    """
    The globally unique \`ID\` to be used in selecting a single \`OtherChild\`.
    """
    nodeId: ID!
  ): OtherChild
  otherChildById(id: Int!): OtherChild

  """Reads a single \`Parent\` using its globally unique \`ID\`."""
  parent(
    """The globally unique \`ID\` to be used in selecting a single \`Parent\`."""
    nodeId: ID!
  ): Parent
  parentById(id: Int!): Parent

  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!
}

"""All input for the \`updateChildById\` mutation."""
input UpdateChildByIdInput {
  """
  An object where the defined keys will be set on the \`Child\` being updated.
  """
  childPatch: ChildPatch!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the \`updateChild\` mutation."""
input UpdateChildInput {
  """
  An object where the defined keys will be set on the \`Child\` being updated.
  """
  childPatch: ChildPatch!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique \`ID\` which will identify a single \`Child\` to be updated.
  """
  nodeId: ID!
}

"""The output of our update \`Child\` mutation."""
type UpdateChildPayload {
  """The \`Child\` that was updated by this mutation."""
  child: Child

  """An edge for our \`Child\`. May be used by Relay 1."""
  childEdge(
    """The method to use when ordering \`Child\`."""
    orderBy: [ChildrenOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChildrenEdge

  """
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single \`Organization\` that is related to this \`Child\`."""
  organizationByOrganizationId: Organization

  """Reads a single \`Parent\` that is related to this \`Child\`."""
  parentByParentId: Parent

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the \`updateOrganizationById\` mutation."""
input UpdateOrganizationByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the \`Organization\` being updated.
  """
  organizationPatch: OrganizationPatch!
}

"""All input for the \`updateOrganization\` mutation."""
input UpdateOrganizationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique \`ID\` which will identify a single \`Organization\` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the \`Organization\` being updated.
  """
  organizationPatch: OrganizationPatch!
}

"""The output of our update \`Organization\` mutation."""
type UpdateOrganizationPayload {
  """
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The \`Organization\` that was updated by this mutation."""
  organization: Organization

  """An edge for our \`Organization\`. May be used by Relay 1."""
  organizationEdge(
    """The method to use when ordering \`Organization\`."""
    orderBy: [OrganizationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganizationsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the \`updateOtherChildById\` mutation."""
input UpdateOtherChildByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the \`OtherChild\` being updated.
  """
  otherChildPatch: OtherChildPatch!
}

"""All input for the \`updateOtherChild\` mutation."""
input UpdateOtherChildInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique \`ID\` which will identify a single \`OtherChild\` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the \`OtherChild\` being updated.
  """
  otherChildPatch: OtherChildPatch!
}

"""The output of our update \`OtherChild\` mutation."""
type UpdateOtherChildPayload {
  """
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The \`OtherChild\` that was updated by this mutation."""
  otherChild: OtherChild

  """An edge for our \`OtherChild\`. May be used by Relay 1."""
  otherChildEdge(
    """The method to use when ordering \`OtherChild\`."""
    orderBy: [OtherChildrenOrderBy!] = [PRIMARY_KEY_ASC]
  ): OtherChildrenEdge

  """Reads a single \`Parent\` that is related to this \`OtherChild\`."""
  parentByParentId: Parent

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the \`updateParentById\` mutation."""
input UpdateParentByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the \`Parent\` being updated.
  """
  parentPatch: ParentPatch!
}

"""All input for the \`updateParent\` mutation."""
input UpdateParentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique \`ID\` which will identify a single \`Parent\` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the \`Parent\` being updated.
  """
  parentPatch: ParentPatch!
}

"""The output of our update \`Parent\` mutation."""
type UpdateParentPayload {
  """
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The \`Parent\` that was updated by this mutation."""
  parent: Parent

  """An edge for our \`Parent\`. May be used by Relay 1."""
  parentEdge(
    """The method to use when ordering \`Parent\`."""
    orderBy: [ParentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ParentsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

`;

exports[`default schema matches snapshot 1`] = `
type Child implements Node {
  archivedAt: Datetime
  id: Int!
  isArchived: Boolean!
  isPublished: Boolean!
  name: String

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads a single \`Organization\` that is related to this \`Child\`."""
  organizationByOrganizationId: Organization
  organizationId: Int!

  """Reads a single \`Parent\` that is related to this \`Child\`."""
  parentByParentId: Parent
  parentId: Int!
  publishedAt: Datetime
  status: String!
}

"""
A condition to be used against \`Child\` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ChildCondition {
  """Checks for equality with the object’s \`archivedAt\` field."""
  archivedAt: Datetime

  """Checks for equality with the object’s \`id\` field."""
  id: Int

  """Checks for equality with the object’s \`isArchived\` field."""
  isArchived: Boolean

  """Checks for equality with the object’s \`isPublished\` field."""
  isPublished: Boolean

  """Checks for equality with the object’s \`name\` field."""
  name: String

  """Checks for equality with the object’s \`organizationId\` field."""
  organizationId: Int

  """Checks for equality with the object’s \`parentId\` field."""
  parentId: Int

  """Checks for equality with the object’s \`publishedAt\` field."""
  publishedAt: Datetime

  """Checks for equality with the object’s \`status\` field."""
  status: String
}

"""An input for mutations affecting \`Child\`"""
input ChildInput {
  archivedAt: Datetime
  id: Int!
  isArchived: Boolean
  isPublished: Boolean
  name: String
  organizationId: Int!
  parentId: Int!
  publishedAt: Datetime
  status: String!
}

"""
Represents an update to a \`Child\`. Fields that are set will be updated.
"""
input ChildPatch {
  archivedAt: Datetime
  id: Int
  isArchived: Boolean
  isPublished: Boolean
  name: String
  organizationId: Int
  parentId: Int
  publishedAt: Datetime
  status: String
}

"""A connection to a list of \`Child\` values."""
type ChildrenConnection {
  """
  A list of edges which contains the \`Child\` and cursor to aid in pagination.
  """
  edges: [ChildrenEdge!]!

  """A list of \`Child\` objects."""
  nodes: [Child]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* \`Child\` you could get from the connection."""
  totalCount: Int!
}

"""A \`Child\` edge in the connection."""
type ChildrenEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The \`Child\` at the end of the edge."""
  node: Child
}

"""Methods to use when ordering \`Child\`."""
enum ChildrenOrderBy {
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  ID_ASC
  ID_DESC
  IS_ARCHIVED_ASC
  IS_ARCHIVED_DESC
  IS_PUBLISHED_ASC
  IS_PUBLISHED_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  ORGANIZATION_ID_ASC
  ORGANIZATION_ID_DESC
  PARENT_ID_ASC
  PARENT_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PUBLISHED_AT_ASC
  PUBLISHED_AT_DESC
  STATUS_ASC
  STATUS_DESC
}

"""All input for the create \`Child\` mutation."""
input CreateChildInput {
  """The \`Child\` to be created by this mutation."""
  child: ChildInput!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our create \`Child\` mutation."""
type CreateChildPayload {
  """The \`Child\` that was created by this mutation."""
  child: Child

  """An edge for our \`Child\`. May be used by Relay 1."""
  childEdge(
    """The method to use when ordering \`Child\`."""
    orderBy: [ChildrenOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChildrenEdge

  """
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single \`Organization\` that is related to this \`Child\`."""
  organizationByOrganizationId: Organization

  """Reads a single \`Parent\` that is related to this \`Child\`."""
  parentByParentId: Parent

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create \`Organization\` mutation."""
input CreateOrganizationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The \`Organization\` to be created by this mutation."""
  organization: OrganizationInput!
}

"""The output of our create \`Organization\` mutation."""
type CreateOrganizationPayload {
  """
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The \`Organization\` that was created by this mutation."""
  organization: Organization

  """An edge for our \`Organization\`. May be used by Relay 1."""
  organizationEdge(
    """The method to use when ordering \`Organization\`."""
    orderBy: [OrganizationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganizationsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create \`OtherChild\` mutation."""
input CreateOtherChildInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The \`OtherChild\` to be created by this mutation."""
  otherChild: OtherChildInput!
}

"""The output of our create \`OtherChild\` mutation."""
type CreateOtherChildPayload {
  """
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The \`OtherChild\` that was created by this mutation."""
  otherChild: OtherChild

  """An edge for our \`OtherChild\`. May be used by Relay 1."""
  otherChildEdge(
    """The method to use when ordering \`OtherChild\`."""
    orderBy: [OtherChildrenOrderBy!] = [PRIMARY_KEY_ASC]
  ): OtherChildrenEdge

  """Reads a single \`Parent\` that is related to this \`OtherChild\`."""
  parentByParentId: Parent

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create \`Parent\` mutation."""
input CreateParentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The \`Parent\` to be created by this mutation."""
  parent: ParentInput!
}

"""The output of our create \`Parent\` mutation."""
type CreateParentPayload {
  """
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The \`Parent\` that was created by this mutation."""
  parent: Parent

  """An edge for our \`Parent\`. May be used by Relay 1."""
  parentEdge(
    """The method to use when ordering \`Parent\`."""
    orderBy: [ParentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ParentsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

"""All input for the \`deleteChildById\` mutation."""
input DeleteChildByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the \`deleteChild\` mutation."""
input DeleteChildInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique \`ID\` which will identify a single \`Child\` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete \`Child\` mutation."""
type DeleteChildPayload {
  """The \`Child\` that was deleted by this mutation."""
  child: Child

  """An edge for our \`Child\`. May be used by Relay 1."""
  childEdge(
    """The method to use when ordering \`Child\`."""
    orderBy: [ChildrenOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChildrenEdge

  """
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedChildId: ID

  """Reads a single \`Organization\` that is related to this \`Child\`."""
  organizationByOrganizationId: Organization

  """Reads a single \`Parent\` that is related to this \`Child\`."""
  parentByParentId: Parent

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the \`deleteOrganizationById\` mutation."""
input DeleteOrganizationByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the \`deleteOrganization\` mutation."""
input DeleteOrganizationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique \`ID\` which will identify a single \`Organization\` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete \`Organization\` mutation."""
type DeleteOrganizationPayload {
  """
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedOrganizationId: ID

  """The \`Organization\` that was deleted by this mutation."""
  organization: Organization

  """An edge for our \`Organization\`. May be used by Relay 1."""
  organizationEdge(
    """The method to use when ordering \`Organization\`."""
    orderBy: [OrganizationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganizationsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the \`deleteOtherChildById\` mutation."""
input DeleteOtherChildByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the \`deleteOtherChild\` mutation."""
input DeleteOtherChildInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique \`ID\` which will identify a single \`OtherChild\` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete \`OtherChild\` mutation."""
type DeleteOtherChildPayload {
  """
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedOtherChildId: ID

  """The \`OtherChild\` that was deleted by this mutation."""
  otherChild: OtherChild

  """An edge for our \`OtherChild\`. May be used by Relay 1."""
  otherChildEdge(
    """The method to use when ordering \`OtherChild\`."""
    orderBy: [OtherChildrenOrderBy!] = [PRIMARY_KEY_ASC]
  ): OtherChildrenEdge

  """Reads a single \`Parent\` that is related to this \`OtherChild\`."""
  parentByParentId: Parent

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the \`deleteParentById\` mutation."""
input DeleteParentByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the \`deleteParent\` mutation."""
input DeleteParentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique \`ID\` which will identify a single \`Parent\` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete \`Parent\` mutation."""
type DeleteParentPayload {
  """
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedParentId: ID

  """The \`Parent\` that was deleted by this mutation."""
  parent: Parent

  """An edge for our \`Parent\`. May be used by Relay 1."""
  parentEdge(
    """The method to use when ordering \`Parent\`."""
    orderBy: [ParentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ParentsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
Indicates whether archived items should be included in the results or not.
"""
enum IncludeArchivedOption {
  """Only include archived items (i.e. exclude non-archived items)."""
  EXCLUSIVELY

  """
  If there is a parent GraphQL record and it is archived then this is equivalent
  to YES, in all other cases this is equivalent to NO.
  """
  INHERIT

  """Exclude archived items."""
  NO

  """Include archived items."""
  YES
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single \`Child\`."""
  createChild(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateChildInput!
  ): CreateChildPayload

  """Creates a single \`Organization\`."""
  createOrganization(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateOrganizationInput!
  ): CreateOrganizationPayload

  """Creates a single \`OtherChild\`."""
  createOtherChild(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateOtherChildInput!
  ): CreateOtherChildPayload

  """Creates a single \`Parent\`."""
  createParent(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateParentInput!
  ): CreateParentPayload

  """Deletes a single \`Child\` using its globally unique id."""
  deleteChild(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteChildInput!
  ): DeleteChildPayload

  """Deletes a single \`Child\` using a unique key."""
  deleteChildById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteChildByIdInput!
  ): DeleteChildPayload

  """Deletes a single \`Organization\` using its globally unique id."""
  deleteOrganization(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOrganizationInput!
  ): DeleteOrganizationPayload

  """Deletes a single \`Organization\` using a unique key."""
  deleteOrganizationById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOrganizationByIdInput!
  ): DeleteOrganizationPayload

  """Deletes a single \`OtherChild\` using its globally unique id."""
  deleteOtherChild(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOtherChildInput!
  ): DeleteOtherChildPayload

  """Deletes a single \`OtherChild\` using a unique key."""
  deleteOtherChildById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOtherChildByIdInput!
  ): DeleteOtherChildPayload

  """Deletes a single \`Parent\` using its globally unique id."""
  deleteParent(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteParentInput!
  ): DeleteParentPayload

  """Deletes a single \`Parent\` using a unique key."""
  deleteParentById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteParentByIdInput!
  ): DeleteParentPayload

  """Updates a single \`Child\` using its globally unique id and a patch."""
  updateChild(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateChildInput!
  ): UpdateChildPayload

  """Updates a single \`Child\` using a unique key and a patch."""
  updateChildById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateChildByIdInput!
  ): UpdateChildPayload

  """
  Updates a single \`Organization\` using its globally unique id and a patch.
  """
  updateOrganization(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOrganizationInput!
  ): UpdateOrganizationPayload

  """Updates a single \`Organization\` using a unique key and a patch."""
  updateOrganizationById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOrganizationByIdInput!
  ): UpdateOrganizationPayload

  """
  Updates a single \`OtherChild\` using its globally unique id and a patch.
  """
  updateOtherChild(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOtherChildInput!
  ): UpdateOtherChildPayload

  """Updates a single \`OtherChild\` using a unique key and a patch."""
  updateOtherChildById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOtherChildByIdInput!
  ): UpdateOtherChildPayload

  """Updates a single \`Parent\` using its globally unique id and a patch."""
  updateParent(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateParentInput!
  ): UpdateParentPayload

  """Updates a single \`Parent\` using a unique key and a patch."""
  updateParentById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateParentByIdInput!
  ): UpdateParentPayload
}

"""An object with a globally unique \`ID\`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

type Organization implements Node {
  archivedAt: Datetime

  """Reads and enables pagination through a set of \`Child\`."""
  childrenByOrganizationId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChildCondition

    """Only read the first \`n\` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last \`n\` values of the set."""
    last: Int

    """
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    """
    offset: Int

    """The method to use when ordering \`Child\`."""
    orderBy: [ChildrenOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChildrenConnection!

  """Reads and enables pagination through a set of \`Child\`."""
  childrenByOrganizationIdList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChildCondition

    """Only read the first \`n\` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Skip the first \`n\` values."""
    offset: Int

    """The method to use when ordering \`Child\`."""
    orderBy: [ChildrenOrderBy!]
  ): [Child!]!
  id: Int!
  isArchived: Boolean!
  isPublished: Boolean!
  name: String

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  publishedAt: Datetime
  status: String!
}

"""
A condition to be used against \`Organization\` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input OrganizationCondition {
  """Checks for equality with the object’s \`archivedAt\` field."""
  archivedAt: Datetime

  """Checks for equality with the object’s \`id\` field."""
  id: Int

  """Checks for equality with the object’s \`isArchived\` field."""
  isArchived: Boolean

  """Checks for equality with the object’s \`isPublished\` field."""
  isPublished: Boolean

  """Checks for equality with the object’s \`name\` field."""
  name: String

  """Checks for equality with the object’s \`publishedAt\` field."""
  publishedAt: Datetime

  """Checks for equality with the object’s \`status\` field."""
  status: String
}

"""An input for mutations affecting \`Organization\`"""
input OrganizationInput {
  archivedAt: Datetime
  id: Int!
  isArchived: Boolean
  isPublished: Boolean
  name: String
  publishedAt: Datetime
  status: String!
}

"""
Represents an update to a \`Organization\`. Fields that are set will be updated.
"""
input OrganizationPatch {
  archivedAt: Datetime
  id: Int
  isArchived: Boolean
  isPublished: Boolean
  name: String
  publishedAt: Datetime
  status: String
}

"""A connection to a list of \`Organization\` values."""
type OrganizationsConnection {
  """
  A list of edges which contains the \`Organization\` and cursor to aid in pagination.
  """
  edges: [OrganizationsEdge!]!

  """A list of \`Organization\` objects."""
  nodes: [Organization]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* \`Organization\` you could get from the connection."""
  totalCount: Int!
}

"""A \`Organization\` edge in the connection."""
type OrganizationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The \`Organization\` at the end of the edge."""
  node: Organization
}

"""Methods to use when ordering \`Organization\`."""
enum OrganizationsOrderBy {
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  ID_ASC
  ID_DESC
  IS_ARCHIVED_ASC
  IS_ARCHIVED_DESC
  IS_PUBLISHED_ASC
  IS_PUBLISHED_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PUBLISHED_AT_ASC
  PUBLISHED_AT_DESC
  STATUS_ASC
  STATUS_DESC
}

type OtherChild implements Node {
  id: Int!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads a single \`Parent\` that is related to this \`OtherChild\`."""
  parentByParentId: Parent
  parentId: Int!
  title: String
}

"""
A condition to be used against \`OtherChild\` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input OtherChildCondition {
  """Checks for equality with the object’s \`id\` field."""
  id: Int

  """Checks for equality with the object’s \`parentId\` field."""
  parentId: Int

  """Checks for equality with the object’s \`title\` field."""
  title: String
}

"""An input for mutations affecting \`OtherChild\`"""
input OtherChildInput {
  id: Int!
  parentId: Int!
  title: String
}

"""
Represents an update to a \`OtherChild\`. Fields that are set will be updated.
"""
input OtherChildPatch {
  id: Int
  parentId: Int
  title: String
}

"""A connection to a list of \`OtherChild\` values."""
type OtherChildrenConnection {
  """
  A list of edges which contains the \`OtherChild\` and cursor to aid in pagination.
  """
  edges: [OtherChildrenEdge!]!

  """A list of \`OtherChild\` objects."""
  nodes: [OtherChild]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* \`OtherChild\` you could get from the connection."""
  totalCount: Int!
}

"""A \`OtherChild\` edge in the connection."""
type OtherChildrenEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The \`OtherChild\` at the end of the edge."""
  node: OtherChild
}

"""Methods to use when ordering \`OtherChild\`."""
enum OtherChildrenOrderBy {
  ID_ASC
  ID_DESC
  NATURAL
  PARENT_ID_ASC
  PARENT_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  TITLE_ASC
  TITLE_DESC
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
}

type Parent implements Node {
  archivedAt: Datetime

  """Reads and enables pagination through a set of \`Child\`."""
  childrenByParentId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChildCondition

    """Only read the first \`n\` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last \`n\` values of the set."""
    last: Int

    """
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    """
    offset: Int

    """The method to use when ordering \`Child\`."""
    orderBy: [ChildrenOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChildrenConnection!

  """Reads and enables pagination through a set of \`Child\`."""
  childrenByParentIdList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChildCondition

    """Only read the first \`n\` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Skip the first \`n\` values."""
    offset: Int

    """The method to use when ordering \`Child\`."""
    orderBy: [ChildrenOrderBy!]
  ): [Child!]!
  id: Int!
  isArchived: Boolean!
  isPublished: Boolean!
  name: String

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads and enables pagination through a set of \`OtherChild\`."""
  otherChildrenByParentId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OtherChildCondition

    """Only read the first \`n\` values of the set."""
    first: Int

    """Only read the last \`n\` values of the set."""
    last: Int

    """
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    """
    offset: Int

    """The method to use when ordering \`OtherChild\`."""
    orderBy: [OtherChildrenOrderBy!] = [PRIMARY_KEY_ASC]
  ): OtherChildrenConnection!

  """Reads and enables pagination through a set of \`OtherChild\`."""
  otherChildrenByParentIdList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OtherChildCondition

    """Only read the first \`n\` values of the set."""
    first: Int

    """Skip the first \`n\` values."""
    offset: Int

    """The method to use when ordering \`OtherChild\`."""
    orderBy: [OtherChildrenOrderBy!]
  ): [OtherChild!]!
  publishedAt: Datetime
  status: String!
}

"""
A condition to be used against \`Parent\` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ParentCondition {
  """Checks for equality with the object’s \`archivedAt\` field."""
  archivedAt: Datetime

  """Checks for equality with the object’s \`id\` field."""
  id: Int

  """Checks for equality with the object’s \`isArchived\` field."""
  isArchived: Boolean

  """Checks for equality with the object’s \`isPublished\` field."""
  isPublished: Boolean

  """Checks for equality with the object’s \`name\` field."""
  name: String

  """Checks for equality with the object’s \`publishedAt\` field."""
  publishedAt: Datetime

  """Checks for equality with the object’s \`status\` field."""
  status: String
}

"""An input for mutations affecting \`Parent\`"""
input ParentInput {
  archivedAt: Datetime
  id: Int!
  isArchived: Boolean
  isPublished: Boolean
  name: String
  publishedAt: Datetime
  status: String!
}

"""
Represents an update to a \`Parent\`. Fields that are set will be updated.
"""
input ParentPatch {
  archivedAt: Datetime
  id: Int
  isArchived: Boolean
  isPublished: Boolean
  name: String
  publishedAt: Datetime
  status: String
}

"""A connection to a list of \`Parent\` values."""
type ParentsConnection {
  """
  A list of edges which contains the \`Parent\` and cursor to aid in pagination.
  """
  edges: [ParentsEdge!]!

  """A list of \`Parent\` objects."""
  nodes: [Parent]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* \`Parent\` you could get from the connection."""
  totalCount: Int!
}

"""A \`Parent\` edge in the connection."""
type ParentsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The \`Parent\` at the end of the edge."""
  node: Parent
}

"""Methods to use when ordering \`Parent\`."""
enum ParentsOrderBy {
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  ID_ASC
  ID_DESC
  IS_ARCHIVED_ASC
  IS_ARCHIVED_DESC
  IS_PUBLISHED_ASC
  IS_PUBLISHED_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PUBLISHED_AT_ASC
  PUBLISHED_AT_DESC
  STATUS_ASC
  STATUS_DESC
}

"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """Reads and enables pagination through a set of \`Child\`."""
  allChildren(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChildCondition

    """Only read the first \`n\` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last \`n\` values of the set."""
    last: Int

    """
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    """
    offset: Int

    """The method to use when ordering \`Child\`."""
    orderBy: [ChildrenOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChildrenConnection

  """Reads a set of \`Child\`."""
  allChildrenList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChildCondition

    """Only read the first \`n\` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Skip the first \`n\` values."""
    offset: Int

    """The method to use when ordering \`Child\`."""
    orderBy: [ChildrenOrderBy!]
  ): [Child!]

  """Reads and enables pagination through a set of \`Organization\`."""
  allOrganizations(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OrganizationCondition

    """Only read the first \`n\` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last \`n\` values of the set."""
    last: Int

    """
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    """
    offset: Int

    """The method to use when ordering \`Organization\`."""
    orderBy: [OrganizationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganizationsConnection

  """Reads a set of \`Organization\`."""
  allOrganizationsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OrganizationCondition

    """Only read the first \`n\` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Skip the first \`n\` values."""
    offset: Int

    """The method to use when ordering \`Organization\`."""
    orderBy: [OrganizationsOrderBy!]
  ): [Organization!]

  """Reads and enables pagination through a set of \`OtherChild\`."""
  allOtherChildren(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OtherChildCondition

    """Only read the first \`n\` values of the set."""
    first: Int

    """Only read the last \`n\` values of the set."""
    last: Int

    """
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    """
    offset: Int

    """The method to use when ordering \`OtherChild\`."""
    orderBy: [OtherChildrenOrderBy!] = [PRIMARY_KEY_ASC]
  ): OtherChildrenConnection

  """Reads a set of \`OtherChild\`."""
  allOtherChildrenList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OtherChildCondition

    """Only read the first \`n\` values of the set."""
    first: Int

    """Skip the first \`n\` values."""
    offset: Int

    """The method to use when ordering \`OtherChild\`."""
    orderBy: [OtherChildrenOrderBy!]
  ): [OtherChild!]

  """Reads and enables pagination through a set of \`Parent\`."""
  allParents(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ParentCondition

    """Only read the first \`n\` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last \`n\` values of the set."""
    last: Int

    """
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    """
    offset: Int

    """The method to use when ordering \`Parent\`."""
    orderBy: [ParentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ParentsConnection

  """Reads a set of \`Parent\`."""
  allParentsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ParentCondition

    """Only read the first \`n\` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Skip the first \`n\` values."""
    offset: Int

    """The method to use when ordering \`Parent\`."""
    orderBy: [ParentsOrderBy!]
  ): [Parent!]

  """Reads a single \`Child\` using its globally unique \`ID\`."""
  child(
    """The globally unique \`ID\` to be used in selecting a single \`Child\`."""
    nodeId: ID!
  ): Child
  childById(id: Int!): Child

  """Fetches an object given its globally unique \`ID\`."""
  node(
    """The globally unique \`ID\`."""
    nodeId: ID!
  ): Node

  """
  The root query type must be a \`Node\` to work well with Relay 1 mutations. This just resolves to \`query\`.
  """
  nodeId: ID!

  """Reads a single \`Organization\` using its globally unique \`ID\`."""
  organization(
    """
    The globally unique \`ID\` to be used in selecting a single \`Organization\`.
    """
    nodeId: ID!
  ): Organization
  organizationById(id: Int!): Organization

  """Reads a single \`OtherChild\` using its globally unique \`ID\`."""
  otherChild(
    """
    The globally unique \`ID\` to be used in selecting a single \`OtherChild\`.
    """
    nodeId: ID!
  ): OtherChild
  otherChildById(id: Int!): OtherChild

  """Reads a single \`Parent\` using its globally unique \`ID\`."""
  parent(
    """The globally unique \`ID\` to be used in selecting a single \`Parent\`."""
    nodeId: ID!
  ): Parent
  parentById(id: Int!): Parent

  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!
}

"""All input for the \`updateChildById\` mutation."""
input UpdateChildByIdInput {
  """
  An object where the defined keys will be set on the \`Child\` being updated.
  """
  childPatch: ChildPatch!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the \`updateChild\` mutation."""
input UpdateChildInput {
  """
  An object where the defined keys will be set on the \`Child\` being updated.
  """
  childPatch: ChildPatch!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique \`ID\` which will identify a single \`Child\` to be updated.
  """
  nodeId: ID!
}

"""The output of our update \`Child\` mutation."""
type UpdateChildPayload {
  """The \`Child\` that was updated by this mutation."""
  child: Child

  """An edge for our \`Child\`. May be used by Relay 1."""
  childEdge(
    """The method to use when ordering \`Child\`."""
    orderBy: [ChildrenOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChildrenEdge

  """
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single \`Organization\` that is related to this \`Child\`."""
  organizationByOrganizationId: Organization

  """Reads a single \`Parent\` that is related to this \`Child\`."""
  parentByParentId: Parent

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the \`updateOrganizationById\` mutation."""
input UpdateOrganizationByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the \`Organization\` being updated.
  """
  organizationPatch: OrganizationPatch!
}

"""All input for the \`updateOrganization\` mutation."""
input UpdateOrganizationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique \`ID\` which will identify a single \`Organization\` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the \`Organization\` being updated.
  """
  organizationPatch: OrganizationPatch!
}

"""The output of our update \`Organization\` mutation."""
type UpdateOrganizationPayload {
  """
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The \`Organization\` that was updated by this mutation."""
  organization: Organization

  """An edge for our \`Organization\`. May be used by Relay 1."""
  organizationEdge(
    """The method to use when ordering \`Organization\`."""
    orderBy: [OrganizationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganizationsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the \`updateOtherChildById\` mutation."""
input UpdateOtherChildByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the \`OtherChild\` being updated.
  """
  otherChildPatch: OtherChildPatch!
}

"""All input for the \`updateOtherChild\` mutation."""
input UpdateOtherChildInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique \`ID\` which will identify a single \`OtherChild\` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the \`OtherChild\` being updated.
  """
  otherChildPatch: OtherChildPatch!
}

"""The output of our update \`OtherChild\` mutation."""
type UpdateOtherChildPayload {
  """
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The \`OtherChild\` that was updated by this mutation."""
  otherChild: OtherChild

  """An edge for our \`OtherChild\`. May be used by Relay 1."""
  otherChildEdge(
    """The method to use when ordering \`OtherChild\`."""
    orderBy: [OtherChildrenOrderBy!] = [PRIMARY_KEY_ASC]
  ): OtherChildrenEdge

  """Reads a single \`Parent\` that is related to this \`OtherChild\`."""
  parentByParentId: Parent

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the \`updateParentById\` mutation."""
input UpdateParentByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the \`Parent\` being updated.
  """
  parentPatch: ParentPatch!
}

"""All input for the \`updateParent\` mutation."""
input UpdateParentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique \`ID\` which will identify a single \`Parent\` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the \`Parent\` being updated.
  """
  parentPatch: ParentPatch!
}

"""The output of our update \`Parent\` mutation."""
type UpdateParentPayload {
  """
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The \`Parent\` that was updated by this mutation."""
  parent: Parent

  """An edge for our \`Parent\`. May be used by Relay 1."""
  parentEdge(
    """The method to use when ordering \`Parent\`."""
    orderBy: [ParentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ParentsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

`;

exports[`default_w_comment schema matches snapshot 1`] = `
type Child implements Node {
  archivedAt: Datetime
  id: Int!
  isArchived: Boolean!
  isPublished: Boolean!
  name: String

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads a single \`Organization\` that is related to this \`Child\`."""
  organizationByOrganizationId: Organization
  organizationId: Int!

  """Reads a single \`Parent\` that is related to this \`Child\`."""
  parentByParentId: Parent
  parentId: Int!
  publishedAt: Datetime
  status: String!
}

"""
A condition to be used against \`Child\` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ChildCondition {
  """Checks for equality with the object’s \`archivedAt\` field."""
  archivedAt: Datetime

  """Checks for equality with the object’s \`id\` field."""
  id: Int

  """Checks for equality with the object’s \`isArchived\` field."""
  isArchived: Boolean

  """Checks for equality with the object’s \`isPublished\` field."""
  isPublished: Boolean

  """Checks for equality with the object’s \`name\` field."""
  name: String

  """Checks for equality with the object’s \`organizationId\` field."""
  organizationId: Int

  """Checks for equality with the object’s \`parentId\` field."""
  parentId: Int

  """Checks for equality with the object’s \`publishedAt\` field."""
  publishedAt: Datetime

  """Checks for equality with the object’s \`status\` field."""
  status: String
}

"""An input for mutations affecting \`Child\`"""
input ChildInput {
  archivedAt: Datetime
  id: Int!
  isArchived: Boolean
  isPublished: Boolean
  name: String
  organizationId: Int!
  parentId: Int!
  publishedAt: Datetime
  status: String!
}

"""
Represents an update to a \`Child\`. Fields that are set will be updated.
"""
input ChildPatch {
  archivedAt: Datetime
  id: Int
  isArchived: Boolean
  isPublished: Boolean
  name: String
  organizationId: Int
  parentId: Int
  publishedAt: Datetime
  status: String
}

"""A connection to a list of \`Child\` values."""
type ChildrenConnection {
  """
  A list of edges which contains the \`Child\` and cursor to aid in pagination.
  """
  edges: [ChildrenEdge!]!

  """A list of \`Child\` objects."""
  nodes: [Child]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* \`Child\` you could get from the connection."""
  totalCount: Int!
}

"""A \`Child\` edge in the connection."""
type ChildrenEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The \`Child\` at the end of the edge."""
  node: Child
}

"""Methods to use when ordering \`Child\`."""
enum ChildrenOrderBy {
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  ID_ASC
  ID_DESC
  IS_ARCHIVED_ASC
  IS_ARCHIVED_DESC
  IS_PUBLISHED_ASC
  IS_PUBLISHED_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  ORGANIZATION_ID_ASC
  ORGANIZATION_ID_DESC
  PARENT_ID_ASC
  PARENT_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PUBLISHED_AT_ASC
  PUBLISHED_AT_DESC
  STATUS_ASC
  STATUS_DESC
}

"""All input for the create \`Child\` mutation."""
input CreateChildInput {
  """The \`Child\` to be created by this mutation."""
  child: ChildInput!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our create \`Child\` mutation."""
type CreateChildPayload {
  """The \`Child\` that was created by this mutation."""
  child: Child

  """An edge for our \`Child\`. May be used by Relay 1."""
  childEdge(
    """The method to use when ordering \`Child\`."""
    orderBy: [ChildrenOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChildrenEdge

  """
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single \`Organization\` that is related to this \`Child\`."""
  organizationByOrganizationId: Organization

  """Reads a single \`Parent\` that is related to this \`Child\`."""
  parentByParentId: Parent

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create \`Organization\` mutation."""
input CreateOrganizationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The \`Organization\` to be created by this mutation."""
  organization: OrganizationInput!
}

"""The output of our create \`Organization\` mutation."""
type CreateOrganizationPayload {
  """
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The \`Organization\` that was created by this mutation."""
  organization: Organization

  """An edge for our \`Organization\`. May be used by Relay 1."""
  organizationEdge(
    """The method to use when ordering \`Organization\`."""
    orderBy: [OrganizationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganizationsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create \`OtherChild\` mutation."""
input CreateOtherChildInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The \`OtherChild\` to be created by this mutation."""
  otherChild: OtherChildInput!
}

"""The output of our create \`OtherChild\` mutation."""
type CreateOtherChildPayload {
  """
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The \`OtherChild\` that was created by this mutation."""
  otherChild: OtherChild

  """An edge for our \`OtherChild\`. May be used by Relay 1."""
  otherChildEdge(
    """The method to use when ordering \`OtherChild\`."""
    orderBy: [OtherChildrenOrderBy!] = [PRIMARY_KEY_ASC]
  ): OtherChildrenEdge

  """Reads a single \`Parent\` that is related to this \`OtherChild\`."""
  parentByParentId: Parent

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create \`Parent\` mutation."""
input CreateParentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The \`Parent\` to be created by this mutation."""
  parent: ParentInput!
}

"""The output of our create \`Parent\` mutation."""
type CreateParentPayload {
  """
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The \`Parent\` that was created by this mutation."""
  parent: Parent

  """An edge for our \`Parent\`. May be used by Relay 1."""
  parentEdge(
    """The method to use when ordering \`Parent\`."""
    orderBy: [ParentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ParentsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

"""All input for the \`deleteChildById\` mutation."""
input DeleteChildByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the \`deleteChild\` mutation."""
input DeleteChildInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique \`ID\` which will identify a single \`Child\` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete \`Child\` mutation."""
type DeleteChildPayload {
  """The \`Child\` that was deleted by this mutation."""
  child: Child

  """An edge for our \`Child\`. May be used by Relay 1."""
  childEdge(
    """The method to use when ordering \`Child\`."""
    orderBy: [ChildrenOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChildrenEdge

  """
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedChildId: ID

  """Reads a single \`Organization\` that is related to this \`Child\`."""
  organizationByOrganizationId: Organization

  """Reads a single \`Parent\` that is related to this \`Child\`."""
  parentByParentId: Parent

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the \`deleteOrganizationById\` mutation."""
input DeleteOrganizationByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the \`deleteOrganization\` mutation."""
input DeleteOrganizationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique \`ID\` which will identify a single \`Organization\` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete \`Organization\` mutation."""
type DeleteOrganizationPayload {
  """
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedOrganizationId: ID

  """The \`Organization\` that was deleted by this mutation."""
  organization: Organization

  """An edge for our \`Organization\`. May be used by Relay 1."""
  organizationEdge(
    """The method to use when ordering \`Organization\`."""
    orderBy: [OrganizationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganizationsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the \`deleteOtherChildById\` mutation."""
input DeleteOtherChildByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the \`deleteOtherChild\` mutation."""
input DeleteOtherChildInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique \`ID\` which will identify a single \`OtherChild\` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete \`OtherChild\` mutation."""
type DeleteOtherChildPayload {
  """
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedOtherChildId: ID

  """The \`OtherChild\` that was deleted by this mutation."""
  otherChild: OtherChild

  """An edge for our \`OtherChild\`. May be used by Relay 1."""
  otherChildEdge(
    """The method to use when ordering \`OtherChild\`."""
    orderBy: [OtherChildrenOrderBy!] = [PRIMARY_KEY_ASC]
  ): OtherChildrenEdge

  """Reads a single \`Parent\` that is related to this \`OtherChild\`."""
  parentByParentId: Parent

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the \`deleteParentById\` mutation."""
input DeleteParentByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the \`deleteParent\` mutation."""
input DeleteParentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique \`ID\` which will identify a single \`Parent\` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete \`Parent\` mutation."""
type DeleteParentPayload {
  """
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedParentId: ID

  """The \`Parent\` that was deleted by this mutation."""
  parent: Parent

  """An edge for our \`Parent\`. May be used by Relay 1."""
  parentEdge(
    """The method to use when ordering \`Parent\`."""
    orderBy: [ParentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ParentsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
Indicates whether archived items should be included in the results or not.
"""
enum IncludeArchivedOption {
  """Only include archived items (i.e. exclude non-archived items)."""
  EXCLUSIVELY

  """
  If there is a parent GraphQL record and it is archived then this is equivalent
  to YES, in all other cases this is equivalent to NO.
  """
  INHERIT

  """Exclude archived items."""
  NO

  """Include archived items."""
  YES
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single \`Child\`."""
  createChild(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateChildInput!
  ): CreateChildPayload

  """Creates a single \`Organization\`."""
  createOrganization(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateOrganizationInput!
  ): CreateOrganizationPayload

  """Creates a single \`OtherChild\`."""
  createOtherChild(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateOtherChildInput!
  ): CreateOtherChildPayload

  """Creates a single \`Parent\`."""
  createParent(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateParentInput!
  ): CreateParentPayload

  """Deletes a single \`Child\` using its globally unique id."""
  deleteChild(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteChildInput!
  ): DeleteChildPayload

  """Deletes a single \`Child\` using a unique key."""
  deleteChildById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteChildByIdInput!
  ): DeleteChildPayload

  """Deletes a single \`Organization\` using its globally unique id."""
  deleteOrganization(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOrganizationInput!
  ): DeleteOrganizationPayload

  """Deletes a single \`Organization\` using a unique key."""
  deleteOrganizationById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOrganizationByIdInput!
  ): DeleteOrganizationPayload

  """Deletes a single \`OtherChild\` using its globally unique id."""
  deleteOtherChild(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOtherChildInput!
  ): DeleteOtherChildPayload

  """Deletes a single \`OtherChild\` using a unique key."""
  deleteOtherChildById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOtherChildByIdInput!
  ): DeleteOtherChildPayload

  """Deletes a single \`Parent\` using its globally unique id."""
  deleteParent(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteParentInput!
  ): DeleteParentPayload

  """Deletes a single \`Parent\` using a unique key."""
  deleteParentById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteParentByIdInput!
  ): DeleteParentPayload

  """Updates a single \`Child\` using its globally unique id and a patch."""
  updateChild(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateChildInput!
  ): UpdateChildPayload

  """Updates a single \`Child\` using a unique key and a patch."""
  updateChildById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateChildByIdInput!
  ): UpdateChildPayload

  """
  Updates a single \`Organization\` using its globally unique id and a patch.
  """
  updateOrganization(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOrganizationInput!
  ): UpdateOrganizationPayload

  """Updates a single \`Organization\` using a unique key and a patch."""
  updateOrganizationById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOrganizationByIdInput!
  ): UpdateOrganizationPayload

  """
  Updates a single \`OtherChild\` using its globally unique id and a patch.
  """
  updateOtherChild(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOtherChildInput!
  ): UpdateOtherChildPayload

  """Updates a single \`OtherChild\` using a unique key and a patch."""
  updateOtherChildById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOtherChildByIdInput!
  ): UpdateOtherChildPayload

  """Updates a single \`Parent\` using its globally unique id and a patch."""
  updateParent(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateParentInput!
  ): UpdateParentPayload

  """Updates a single \`Parent\` using a unique key and a patch."""
  updateParentById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateParentByIdInput!
  ): UpdateParentPayload
}

"""An object with a globally unique \`ID\`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

type Organization implements Node {
  archivedAt: Datetime

  """Reads and enables pagination through a set of \`Child\`."""
  childrenByOrganizationId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChildCondition

    """Only read the first \`n\` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeWhenParentByParentIdArchived: IncludeArchivedOption = INHERIT

    """Only read the last \`n\` values of the set."""
    last: Int

    """
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    """
    offset: Int

    """The method to use when ordering \`Child\`."""
    orderBy: [ChildrenOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChildrenConnection!

  """Reads and enables pagination through a set of \`Child\`."""
  childrenByOrganizationIdList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChildCondition

    """Only read the first \`n\` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeWhenParentByParentIdArchived: IncludeArchivedOption = INHERIT

    """Skip the first \`n\` values."""
    offset: Int

    """The method to use when ordering \`Child\`."""
    orderBy: [ChildrenOrderBy!]
  ): [Child!]!
  id: Int!
  isArchived: Boolean!
  isPublished: Boolean!
  name: String

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  publishedAt: Datetime
  status: String!
}

"""
A condition to be used against \`Organization\` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input OrganizationCondition {
  """Checks for equality with the object’s \`archivedAt\` field."""
  archivedAt: Datetime

  """Checks for equality with the object’s \`id\` field."""
  id: Int

  """Checks for equality with the object’s \`isArchived\` field."""
  isArchived: Boolean

  """Checks for equality with the object’s \`isPublished\` field."""
  isPublished: Boolean

  """Checks for equality with the object’s \`name\` field."""
  name: String

  """Checks for equality with the object’s \`publishedAt\` field."""
  publishedAt: Datetime

  """Checks for equality with the object’s \`status\` field."""
  status: String
}

"""An input for mutations affecting \`Organization\`"""
input OrganizationInput {
  archivedAt: Datetime
  id: Int!
  isArchived: Boolean
  isPublished: Boolean
  name: String
  publishedAt: Datetime
  status: String!
}

"""
Represents an update to a \`Organization\`. Fields that are set will be updated.
"""
input OrganizationPatch {
  archivedAt: Datetime
  id: Int
  isArchived: Boolean
  isPublished: Boolean
  name: String
  publishedAt: Datetime
  status: String
}

"""A connection to a list of \`Organization\` values."""
type OrganizationsConnection {
  """
  A list of edges which contains the \`Organization\` and cursor to aid in pagination.
  """
  edges: [OrganizationsEdge!]!

  """A list of \`Organization\` objects."""
  nodes: [Organization]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* \`Organization\` you could get from the connection."""
  totalCount: Int!
}

"""A \`Organization\` edge in the connection."""
type OrganizationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The \`Organization\` at the end of the edge."""
  node: Organization
}

"""Methods to use when ordering \`Organization\`."""
enum OrganizationsOrderBy {
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  ID_ASC
  ID_DESC
  IS_ARCHIVED_ASC
  IS_ARCHIVED_DESC
  IS_PUBLISHED_ASC
  IS_PUBLISHED_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PUBLISHED_AT_ASC
  PUBLISHED_AT_DESC
  STATUS_ASC
  STATUS_DESC
}

type OtherChild implements Node {
  id: Int!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads a single \`Parent\` that is related to this \`OtherChild\`."""
  parentByParentId: Parent
  parentId: Int!
  title: String
}

"""
A condition to be used against \`OtherChild\` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input OtherChildCondition {
  """Checks for equality with the object’s \`id\` field."""
  id: Int

  """Checks for equality with the object’s \`parentId\` field."""
  parentId: Int

  """Checks for equality with the object’s \`title\` field."""
  title: String
}

"""An input for mutations affecting \`OtherChild\`"""
input OtherChildInput {
  id: Int!
  parentId: Int!
  title: String
}

"""
Represents an update to a \`OtherChild\`. Fields that are set will be updated.
"""
input OtherChildPatch {
  id: Int
  parentId: Int
  title: String
}

"""A connection to a list of \`OtherChild\` values."""
type OtherChildrenConnection {
  """
  A list of edges which contains the \`OtherChild\` and cursor to aid in pagination.
  """
  edges: [OtherChildrenEdge!]!

  """A list of \`OtherChild\` objects."""
  nodes: [OtherChild]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* \`OtherChild\` you could get from the connection."""
  totalCount: Int!
}

"""A \`OtherChild\` edge in the connection."""
type OtherChildrenEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The \`OtherChild\` at the end of the edge."""
  node: OtherChild
}

"""Methods to use when ordering \`OtherChild\`."""
enum OtherChildrenOrderBy {
  ID_ASC
  ID_DESC
  NATURAL
  PARENT_ID_ASC
  PARENT_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  TITLE_ASC
  TITLE_DESC
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
}

type Parent implements Node {
  archivedAt: Datetime

  """Reads and enables pagination through a set of \`Child\`."""
  childrenByParentId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChildCondition

    """Only read the first \`n\` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeWhenParentByParentIdArchived: IncludeArchivedOption = INHERIT

    """Only read the last \`n\` values of the set."""
    last: Int

    """
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    """
    offset: Int

    """The method to use when ordering \`Child\`."""
    orderBy: [ChildrenOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChildrenConnection!

  """Reads and enables pagination through a set of \`Child\`."""
  childrenByParentIdList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChildCondition

    """Only read the first \`n\` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeWhenParentByParentIdArchived: IncludeArchivedOption = INHERIT

    """Skip the first \`n\` values."""
    offset: Int

    """The method to use when ordering \`Child\`."""
    orderBy: [ChildrenOrderBy!]
  ): [Child!]!
  id: Int!
  isArchived: Boolean!
  isPublished: Boolean!
  name: String

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads and enables pagination through a set of \`OtherChild\`."""
  otherChildrenByParentId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OtherChildCondition

    """Only read the first \`n\` values of the set."""
    first: Int

    """Only read the last \`n\` values of the set."""
    last: Int

    """
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    """
    offset: Int

    """The method to use when ordering \`OtherChild\`."""
    orderBy: [OtherChildrenOrderBy!] = [PRIMARY_KEY_ASC]
  ): OtherChildrenConnection!

  """Reads and enables pagination through a set of \`OtherChild\`."""
  otherChildrenByParentIdList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OtherChildCondition

    """Only read the first \`n\` values of the set."""
    first: Int

    """Skip the first \`n\` values."""
    offset: Int

    """The method to use when ordering \`OtherChild\`."""
    orderBy: [OtherChildrenOrderBy!]
  ): [OtherChild!]!
  publishedAt: Datetime
  status: String!
}

"""
A condition to be used against \`Parent\` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ParentCondition {
  """Checks for equality with the object’s \`archivedAt\` field."""
  archivedAt: Datetime

  """Checks for equality with the object’s \`id\` field."""
  id: Int

  """Checks for equality with the object’s \`isArchived\` field."""
  isArchived: Boolean

  """Checks for equality with the object’s \`isPublished\` field."""
  isPublished: Boolean

  """Checks for equality with the object’s \`name\` field."""
  name: String

  """Checks for equality with the object’s \`publishedAt\` field."""
  publishedAt: Datetime

  """Checks for equality with the object’s \`status\` field."""
  status: String
}

"""An input for mutations affecting \`Parent\`"""
input ParentInput {
  archivedAt: Datetime
  id: Int!
  isArchived: Boolean
  isPublished: Boolean
  name: String
  publishedAt: Datetime
  status: String!
}

"""
Represents an update to a \`Parent\`. Fields that are set will be updated.
"""
input ParentPatch {
  archivedAt: Datetime
  id: Int
  isArchived: Boolean
  isPublished: Boolean
  name: String
  publishedAt: Datetime
  status: String
}

"""A connection to a list of \`Parent\` values."""
type ParentsConnection {
  """
  A list of edges which contains the \`Parent\` and cursor to aid in pagination.
  """
  edges: [ParentsEdge!]!

  """A list of \`Parent\` objects."""
  nodes: [Parent]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* \`Parent\` you could get from the connection."""
  totalCount: Int!
}

"""A \`Parent\` edge in the connection."""
type ParentsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The \`Parent\` at the end of the edge."""
  node: Parent
}

"""Methods to use when ordering \`Parent\`."""
enum ParentsOrderBy {
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  ID_ASC
  ID_DESC
  IS_ARCHIVED_ASC
  IS_ARCHIVED_DESC
  IS_PUBLISHED_ASC
  IS_PUBLISHED_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PUBLISHED_AT_ASC
  PUBLISHED_AT_DESC
  STATUS_ASC
  STATUS_DESC
}

"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """Reads and enables pagination through a set of \`Child\`."""
  allChildren(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChildCondition

    """Only read the first \`n\` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeWhenParentByParentIdArchived: IncludeArchivedOption = NO

    """Only read the last \`n\` values of the set."""
    last: Int

    """
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    """
    offset: Int

    """The method to use when ordering \`Child\`."""
    orderBy: [ChildrenOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChildrenConnection

  """Reads a set of \`Child\`."""
  allChildrenList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChildCondition

    """Only read the first \`n\` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeWhenParentByParentIdArchived: IncludeArchivedOption = NO

    """Skip the first \`n\` values."""
    offset: Int

    """The method to use when ordering \`Child\`."""
    orderBy: [ChildrenOrderBy!]
  ): [Child!]

  """Reads and enables pagination through a set of \`Organization\`."""
  allOrganizations(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OrganizationCondition

    """Only read the first \`n\` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last \`n\` values of the set."""
    last: Int

    """
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    """
    offset: Int

    """The method to use when ordering \`Organization\`."""
    orderBy: [OrganizationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganizationsConnection

  """Reads a set of \`Organization\`."""
  allOrganizationsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OrganizationCondition

    """Only read the first \`n\` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Skip the first \`n\` values."""
    offset: Int

    """The method to use when ordering \`Organization\`."""
    orderBy: [OrganizationsOrderBy!]
  ): [Organization!]

  """Reads and enables pagination through a set of \`OtherChild\`."""
  allOtherChildren(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OtherChildCondition

    """Only read the first \`n\` values of the set."""
    first: Int

    """Only read the last \`n\` values of the set."""
    last: Int

    """
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    """
    offset: Int

    """The method to use when ordering \`OtherChild\`."""
    orderBy: [OtherChildrenOrderBy!] = [PRIMARY_KEY_ASC]
  ): OtherChildrenConnection

  """Reads a set of \`OtherChild\`."""
  allOtherChildrenList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OtherChildCondition

    """Only read the first \`n\` values of the set."""
    first: Int

    """Skip the first \`n\` values."""
    offset: Int

    """The method to use when ordering \`OtherChild\`."""
    orderBy: [OtherChildrenOrderBy!]
  ): [OtherChild!]

  """Reads and enables pagination through a set of \`Parent\`."""
  allParents(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ParentCondition

    """Only read the first \`n\` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last \`n\` values of the set."""
    last: Int

    """
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    """
    offset: Int

    """The method to use when ordering \`Parent\`."""
    orderBy: [ParentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ParentsConnection

  """Reads a set of \`Parent\`."""
  allParentsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ParentCondition

    """Only read the first \`n\` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Skip the first \`n\` values."""
    offset: Int

    """The method to use when ordering \`Parent\`."""
    orderBy: [ParentsOrderBy!]
  ): [Parent!]

  """Reads a single \`Child\` using its globally unique \`ID\`."""
  child(
    """The globally unique \`ID\` to be used in selecting a single \`Child\`."""
    nodeId: ID!
  ): Child
  childById(id: Int!): Child

  """Fetches an object given its globally unique \`ID\`."""
  node(
    """The globally unique \`ID\`."""
    nodeId: ID!
  ): Node

  """
  The root query type must be a \`Node\` to work well with Relay 1 mutations. This just resolves to \`query\`.
  """
  nodeId: ID!

  """Reads a single \`Organization\` using its globally unique \`ID\`."""
  organization(
    """
    The globally unique \`ID\` to be used in selecting a single \`Organization\`.
    """
    nodeId: ID!
  ): Organization
  organizationById(id: Int!): Organization

  """Reads a single \`OtherChild\` using its globally unique \`ID\`."""
  otherChild(
    """
    The globally unique \`ID\` to be used in selecting a single \`OtherChild\`.
    """
    nodeId: ID!
  ): OtherChild
  otherChildById(id: Int!): OtherChild

  """Reads a single \`Parent\` using its globally unique \`ID\`."""
  parent(
    """The globally unique \`ID\` to be used in selecting a single \`Parent\`."""
    nodeId: ID!
  ): Parent
  parentById(id: Int!): Parent

  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!
}

"""All input for the \`updateChildById\` mutation."""
input UpdateChildByIdInput {
  """
  An object where the defined keys will be set on the \`Child\` being updated.
  """
  childPatch: ChildPatch!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the \`updateChild\` mutation."""
input UpdateChildInput {
  """
  An object where the defined keys will be set on the \`Child\` being updated.
  """
  childPatch: ChildPatch!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique \`ID\` which will identify a single \`Child\` to be updated.
  """
  nodeId: ID!
}

"""The output of our update \`Child\` mutation."""
type UpdateChildPayload {
  """The \`Child\` that was updated by this mutation."""
  child: Child

  """An edge for our \`Child\`. May be used by Relay 1."""
  childEdge(
    """The method to use when ordering \`Child\`."""
    orderBy: [ChildrenOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChildrenEdge

  """
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single \`Organization\` that is related to this \`Child\`."""
  organizationByOrganizationId: Organization

  """Reads a single \`Parent\` that is related to this \`Child\`."""
  parentByParentId: Parent

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the \`updateOrganizationById\` mutation."""
input UpdateOrganizationByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the \`Organization\` being updated.
  """
  organizationPatch: OrganizationPatch!
}

"""All input for the \`updateOrganization\` mutation."""
input UpdateOrganizationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique \`ID\` which will identify a single \`Organization\` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the \`Organization\` being updated.
  """
  organizationPatch: OrganizationPatch!
}

"""The output of our update \`Organization\` mutation."""
type UpdateOrganizationPayload {
  """
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The \`Organization\` that was updated by this mutation."""
  organization: Organization

  """An edge for our \`Organization\`. May be used by Relay 1."""
  organizationEdge(
    """The method to use when ordering \`Organization\`."""
    orderBy: [OrganizationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganizationsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the \`updateOtherChildById\` mutation."""
input UpdateOtherChildByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the \`OtherChild\` being updated.
  """
  otherChildPatch: OtherChildPatch!
}

"""All input for the \`updateOtherChild\` mutation."""
input UpdateOtherChildInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique \`ID\` which will identify a single \`OtherChild\` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the \`OtherChild\` being updated.
  """
  otherChildPatch: OtherChildPatch!
}

"""The output of our update \`OtherChild\` mutation."""
type UpdateOtherChildPayload {
  """
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The \`OtherChild\` that was updated by this mutation."""
  otherChild: OtherChild

  """An edge for our \`OtherChild\`. May be used by Relay 1."""
  otherChildEdge(
    """The method to use when ordering \`OtherChild\`."""
    orderBy: [OtherChildrenOrderBy!] = [PRIMARY_KEY_ASC]
  ): OtherChildrenEdge

  """Reads a single \`Parent\` that is related to this \`OtherChild\`."""
  parentByParentId: Parent

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the \`updateParentById\` mutation."""
input UpdateParentByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the \`Parent\` being updated.
  """
  parentPatch: ParentPatch!
}

"""All input for the \`updateParent\` mutation."""
input UpdateParentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique \`ID\` which will identify a single \`Parent\` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the \`Parent\` being updated.
  """
  parentPatch: ParentPatch!
}

"""The output of our update \`Parent\` mutation."""
type UpdateParentPayload {
  """
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The \`Parent\` that was updated by this mutation."""
  parent: Parent

  """An edge for our \`Parent\`. May be used by Relay 1."""
  parentEdge(
    """The method to use when ordering \`Parent\`."""
    orderBy: [ParentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ParentsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

`;

exports[`is_archived schema matches snapshot 1`] = `
type Child implements Node {
  archivedAt: Datetime
  id: Int!
  isArchived: Boolean!
  isPublished: Boolean!
  name: String

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads a single \`Organization\` that is related to this \`Child\`."""
  organizationByOrganizationId: Organization
  organizationId: Int!

  """Reads a single \`Parent\` that is related to this \`Child\`."""
  parentByParentId: Parent
  parentId: Int!
  publishedAt: Datetime
  status: String!
}

"""
A condition to be used against \`Child\` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ChildCondition {
  """Checks for equality with the object’s \`archivedAt\` field."""
  archivedAt: Datetime

  """Checks for equality with the object’s \`id\` field."""
  id: Int

  """Checks for equality with the object’s \`isArchived\` field."""
  isArchived: Boolean

  """Checks for equality with the object’s \`isPublished\` field."""
  isPublished: Boolean

  """Checks for equality with the object’s \`name\` field."""
  name: String

  """Checks for equality with the object’s \`organizationId\` field."""
  organizationId: Int

  """Checks for equality with the object’s \`parentId\` field."""
  parentId: Int

  """Checks for equality with the object’s \`publishedAt\` field."""
  publishedAt: Datetime

  """Checks for equality with the object’s \`status\` field."""
  status: String
}

"""An input for mutations affecting \`Child\`"""
input ChildInput {
  archivedAt: Datetime
  id: Int!
  isArchived: Boolean
  isPublished: Boolean
  name: String
  organizationId: Int!
  parentId: Int!
  publishedAt: Datetime
  status: String!
}

"""
Represents an update to a \`Child\`. Fields that are set will be updated.
"""
input ChildPatch {
  archivedAt: Datetime
  id: Int
  isArchived: Boolean
  isPublished: Boolean
  name: String
  organizationId: Int
  parentId: Int
  publishedAt: Datetime
  status: String
}

"""A connection to a list of \`Child\` values."""
type ChildrenConnection {
  """
  A list of edges which contains the \`Child\` and cursor to aid in pagination.
  """
  edges: [ChildrenEdge!]!

  """A list of \`Child\` objects."""
  nodes: [Child]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* \`Child\` you could get from the connection."""
  totalCount: Int!
}

"""A \`Child\` edge in the connection."""
type ChildrenEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The \`Child\` at the end of the edge."""
  node: Child
}

"""Methods to use when ordering \`Child\`."""
enum ChildrenOrderBy {
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  ID_ASC
  ID_DESC
  IS_ARCHIVED_ASC
  IS_ARCHIVED_DESC
  IS_PUBLISHED_ASC
  IS_PUBLISHED_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  ORGANIZATION_ID_ASC
  ORGANIZATION_ID_DESC
  PARENT_ID_ASC
  PARENT_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PUBLISHED_AT_ASC
  PUBLISHED_AT_DESC
  STATUS_ASC
  STATUS_DESC
}

"""All input for the create \`Child\` mutation."""
input CreateChildInput {
  """The \`Child\` to be created by this mutation."""
  child: ChildInput!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our create \`Child\` mutation."""
type CreateChildPayload {
  """The \`Child\` that was created by this mutation."""
  child: Child

  """An edge for our \`Child\`. May be used by Relay 1."""
  childEdge(
    """The method to use when ordering \`Child\`."""
    orderBy: [ChildrenOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChildrenEdge

  """
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single \`Organization\` that is related to this \`Child\`."""
  organizationByOrganizationId: Organization

  """Reads a single \`Parent\` that is related to this \`Child\`."""
  parentByParentId: Parent

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create \`Organization\` mutation."""
input CreateOrganizationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The \`Organization\` to be created by this mutation."""
  organization: OrganizationInput!
}

"""The output of our create \`Organization\` mutation."""
type CreateOrganizationPayload {
  """
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The \`Organization\` that was created by this mutation."""
  organization: Organization

  """An edge for our \`Organization\`. May be used by Relay 1."""
  organizationEdge(
    """The method to use when ordering \`Organization\`."""
    orderBy: [OrganizationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganizationsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create \`OtherChild\` mutation."""
input CreateOtherChildInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The \`OtherChild\` to be created by this mutation."""
  otherChild: OtherChildInput!
}

"""The output of our create \`OtherChild\` mutation."""
type CreateOtherChildPayload {
  """
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The \`OtherChild\` that was created by this mutation."""
  otherChild: OtherChild

  """An edge for our \`OtherChild\`. May be used by Relay 1."""
  otherChildEdge(
    """The method to use when ordering \`OtherChild\`."""
    orderBy: [OtherChildrenOrderBy!] = [PRIMARY_KEY_ASC]
  ): OtherChildrenEdge

  """Reads a single \`Parent\` that is related to this \`OtherChild\`."""
  parentByParentId: Parent

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create \`Parent\` mutation."""
input CreateParentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The \`Parent\` to be created by this mutation."""
  parent: ParentInput!
}

"""The output of our create \`Parent\` mutation."""
type CreateParentPayload {
  """
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The \`Parent\` that was created by this mutation."""
  parent: Parent

  """An edge for our \`Parent\`. May be used by Relay 1."""
  parentEdge(
    """The method to use when ordering \`Parent\`."""
    orderBy: [ParentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ParentsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

"""All input for the \`deleteChildById\` mutation."""
input DeleteChildByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the \`deleteChild\` mutation."""
input DeleteChildInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique \`ID\` which will identify a single \`Child\` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete \`Child\` mutation."""
type DeleteChildPayload {
  """The \`Child\` that was deleted by this mutation."""
  child: Child

  """An edge for our \`Child\`. May be used by Relay 1."""
  childEdge(
    """The method to use when ordering \`Child\`."""
    orderBy: [ChildrenOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChildrenEdge

  """
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedChildId: ID

  """Reads a single \`Organization\` that is related to this \`Child\`."""
  organizationByOrganizationId: Organization

  """Reads a single \`Parent\` that is related to this \`Child\`."""
  parentByParentId: Parent

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the \`deleteOrganizationById\` mutation."""
input DeleteOrganizationByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the \`deleteOrganization\` mutation."""
input DeleteOrganizationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique \`ID\` which will identify a single \`Organization\` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete \`Organization\` mutation."""
type DeleteOrganizationPayload {
  """
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedOrganizationId: ID

  """The \`Organization\` that was deleted by this mutation."""
  organization: Organization

  """An edge for our \`Organization\`. May be used by Relay 1."""
  organizationEdge(
    """The method to use when ordering \`Organization\`."""
    orderBy: [OrganizationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganizationsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the \`deleteOtherChildById\` mutation."""
input DeleteOtherChildByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the \`deleteOtherChild\` mutation."""
input DeleteOtherChildInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique \`ID\` which will identify a single \`OtherChild\` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete \`OtherChild\` mutation."""
type DeleteOtherChildPayload {
  """
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedOtherChildId: ID

  """The \`OtherChild\` that was deleted by this mutation."""
  otherChild: OtherChild

  """An edge for our \`OtherChild\`. May be used by Relay 1."""
  otherChildEdge(
    """The method to use when ordering \`OtherChild\`."""
    orderBy: [OtherChildrenOrderBy!] = [PRIMARY_KEY_ASC]
  ): OtherChildrenEdge

  """Reads a single \`Parent\` that is related to this \`OtherChild\`."""
  parentByParentId: Parent

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the \`deleteParentById\` mutation."""
input DeleteParentByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the \`deleteParent\` mutation."""
input DeleteParentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique \`ID\` which will identify a single \`Parent\` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete \`Parent\` mutation."""
type DeleteParentPayload {
  """
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedParentId: ID

  """The \`Parent\` that was deleted by this mutation."""
  parent: Parent

  """An edge for our \`Parent\`. May be used by Relay 1."""
  parentEdge(
    """The method to use when ordering \`Parent\`."""
    orderBy: [ParentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ParentsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
Indicates whether archived items should be included in the results or not.
"""
enum IncludeArchivedOption {
  """Only include archived items (i.e. exclude non-archived items)."""
  EXCLUSIVELY

  """
  If there is a parent GraphQL record and it is archived then this is equivalent
  to YES, in all other cases this is equivalent to NO.
  """
  INHERIT

  """Exclude archived items."""
  NO

  """Include archived items."""
  YES
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single \`Child\`."""
  createChild(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateChildInput!
  ): CreateChildPayload

  """Creates a single \`Organization\`."""
  createOrganization(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateOrganizationInput!
  ): CreateOrganizationPayload

  """Creates a single \`OtherChild\`."""
  createOtherChild(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateOtherChildInput!
  ): CreateOtherChildPayload

  """Creates a single \`Parent\`."""
  createParent(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateParentInput!
  ): CreateParentPayload

  """Deletes a single \`Child\` using its globally unique id."""
  deleteChild(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteChildInput!
  ): DeleteChildPayload

  """Deletes a single \`Child\` using a unique key."""
  deleteChildById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteChildByIdInput!
  ): DeleteChildPayload

  """Deletes a single \`Organization\` using its globally unique id."""
  deleteOrganization(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOrganizationInput!
  ): DeleteOrganizationPayload

  """Deletes a single \`Organization\` using a unique key."""
  deleteOrganizationById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOrganizationByIdInput!
  ): DeleteOrganizationPayload

  """Deletes a single \`OtherChild\` using its globally unique id."""
  deleteOtherChild(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOtherChildInput!
  ): DeleteOtherChildPayload

  """Deletes a single \`OtherChild\` using a unique key."""
  deleteOtherChildById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOtherChildByIdInput!
  ): DeleteOtherChildPayload

  """Deletes a single \`Parent\` using its globally unique id."""
  deleteParent(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteParentInput!
  ): DeleteParentPayload

  """Deletes a single \`Parent\` using a unique key."""
  deleteParentById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteParentByIdInput!
  ): DeleteParentPayload

  """Updates a single \`Child\` using its globally unique id and a patch."""
  updateChild(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateChildInput!
  ): UpdateChildPayload

  """Updates a single \`Child\` using a unique key and a patch."""
  updateChildById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateChildByIdInput!
  ): UpdateChildPayload

  """
  Updates a single \`Organization\` using its globally unique id and a patch.
  """
  updateOrganization(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOrganizationInput!
  ): UpdateOrganizationPayload

  """Updates a single \`Organization\` using a unique key and a patch."""
  updateOrganizationById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOrganizationByIdInput!
  ): UpdateOrganizationPayload

  """
  Updates a single \`OtherChild\` using its globally unique id and a patch.
  """
  updateOtherChild(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOtherChildInput!
  ): UpdateOtherChildPayload

  """Updates a single \`OtherChild\` using a unique key and a patch."""
  updateOtherChildById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOtherChildByIdInput!
  ): UpdateOtherChildPayload

  """Updates a single \`Parent\` using its globally unique id and a patch."""
  updateParent(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateParentInput!
  ): UpdateParentPayload

  """Updates a single \`Parent\` using a unique key and a patch."""
  updateParentById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateParentByIdInput!
  ): UpdateParentPayload
}

"""An object with a globally unique \`ID\`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

type Organization implements Node {
  archivedAt: Datetime

  """Reads and enables pagination through a set of \`Child\`."""
  childrenByOrganizationId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChildCondition

    """Only read the first \`n\` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeWhenOrganizationByOrganizationIdArchived: IncludeArchivedOption = INHERIT

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeWhenParentByParentIdArchived: IncludeArchivedOption = INHERIT

    """Only read the last \`n\` values of the set."""
    last: Int

    """
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    """
    offset: Int

    """The method to use when ordering \`Child\`."""
    orderBy: [ChildrenOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChildrenConnection!

  """Reads and enables pagination through a set of \`Child\`."""
  childrenByOrganizationIdList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChildCondition

    """Only read the first \`n\` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeWhenOrganizationByOrganizationIdArchived: IncludeArchivedOption = INHERIT

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeWhenParentByParentIdArchived: IncludeArchivedOption = INHERIT

    """Skip the first \`n\` values."""
    offset: Int

    """The method to use when ordering \`Child\`."""
    orderBy: [ChildrenOrderBy!]
  ): [Child!]!
  id: Int!
  isArchived: Boolean!
  isPublished: Boolean!
  name: String

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  publishedAt: Datetime
  status: String!
}

"""
A condition to be used against \`Organization\` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input OrganizationCondition {
  """Checks for equality with the object’s \`archivedAt\` field."""
  archivedAt: Datetime

  """Checks for equality with the object’s \`id\` field."""
  id: Int

  """Checks for equality with the object’s \`isArchived\` field."""
  isArchived: Boolean

  """Checks for equality with the object’s \`isPublished\` field."""
  isPublished: Boolean

  """Checks for equality with the object’s \`name\` field."""
  name: String

  """Checks for equality with the object’s \`publishedAt\` field."""
  publishedAt: Datetime

  """Checks for equality with the object’s \`status\` field."""
  status: String
}

"""An input for mutations affecting \`Organization\`"""
input OrganizationInput {
  archivedAt: Datetime
  id: Int!
  isArchived: Boolean
  isPublished: Boolean
  name: String
  publishedAt: Datetime
  status: String!
}

"""
Represents an update to a \`Organization\`. Fields that are set will be updated.
"""
input OrganizationPatch {
  archivedAt: Datetime
  id: Int
  isArchived: Boolean
  isPublished: Boolean
  name: String
  publishedAt: Datetime
  status: String
}

"""A connection to a list of \`Organization\` values."""
type OrganizationsConnection {
  """
  A list of edges which contains the \`Organization\` and cursor to aid in pagination.
  """
  edges: [OrganizationsEdge!]!

  """A list of \`Organization\` objects."""
  nodes: [Organization]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* \`Organization\` you could get from the connection."""
  totalCount: Int!
}

"""A \`Organization\` edge in the connection."""
type OrganizationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The \`Organization\` at the end of the edge."""
  node: Organization
}

"""Methods to use when ordering \`Organization\`."""
enum OrganizationsOrderBy {
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  ID_ASC
  ID_DESC
  IS_ARCHIVED_ASC
  IS_ARCHIVED_DESC
  IS_PUBLISHED_ASC
  IS_PUBLISHED_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PUBLISHED_AT_ASC
  PUBLISHED_AT_DESC
  STATUS_ASC
  STATUS_DESC
}

type OtherChild implements Node {
  id: Int!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads a single \`Parent\` that is related to this \`OtherChild\`."""
  parentByParentId: Parent
  parentId: Int!
  title: String
}

"""
A condition to be used against \`OtherChild\` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input OtherChildCondition {
  """Checks for equality with the object’s \`id\` field."""
  id: Int

  """Checks for equality with the object’s \`parentId\` field."""
  parentId: Int

  """Checks for equality with the object’s \`title\` field."""
  title: String
}

"""An input for mutations affecting \`OtherChild\`"""
input OtherChildInput {
  id: Int!
  parentId: Int!
  title: String
}

"""
Represents an update to a \`OtherChild\`. Fields that are set will be updated.
"""
input OtherChildPatch {
  id: Int
  parentId: Int
  title: String
}

"""A connection to a list of \`OtherChild\` values."""
type OtherChildrenConnection {
  """
  A list of edges which contains the \`OtherChild\` and cursor to aid in pagination.
  """
  edges: [OtherChildrenEdge!]!

  """A list of \`OtherChild\` objects."""
  nodes: [OtherChild]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* \`OtherChild\` you could get from the connection."""
  totalCount: Int!
}

"""A \`OtherChild\` edge in the connection."""
type OtherChildrenEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The \`OtherChild\` at the end of the edge."""
  node: OtherChild
}

"""Methods to use when ordering \`OtherChild\`."""
enum OtherChildrenOrderBy {
  ID_ASC
  ID_DESC
  NATURAL
  PARENT_ID_ASC
  PARENT_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  TITLE_ASC
  TITLE_DESC
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
}

type Parent implements Node {
  archivedAt: Datetime

  """Reads and enables pagination through a set of \`Child\`."""
  childrenByParentId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChildCondition

    """Only read the first \`n\` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeWhenOrganizationByOrganizationIdArchived: IncludeArchivedOption = INHERIT

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeWhenParentByParentIdArchived: IncludeArchivedOption = INHERIT

    """Only read the last \`n\` values of the set."""
    last: Int

    """
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    """
    offset: Int

    """The method to use when ordering \`Child\`."""
    orderBy: [ChildrenOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChildrenConnection!

  """Reads and enables pagination through a set of \`Child\`."""
  childrenByParentIdList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChildCondition

    """Only read the first \`n\` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeWhenOrganizationByOrganizationIdArchived: IncludeArchivedOption = INHERIT

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeWhenParentByParentIdArchived: IncludeArchivedOption = INHERIT

    """Skip the first \`n\` values."""
    offset: Int

    """The method to use when ordering \`Child\`."""
    orderBy: [ChildrenOrderBy!]
  ): [Child!]!
  id: Int!
  isArchived: Boolean!
  isPublished: Boolean!
  name: String

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads and enables pagination through a set of \`OtherChild\`."""
  otherChildrenByParentId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OtherChildCondition

    """Only read the first \`n\` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeWhenParentByParentIdArchived: IncludeArchivedOption = INHERIT

    """Only read the last \`n\` values of the set."""
    last: Int

    """
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    """
    offset: Int

    """The method to use when ordering \`OtherChild\`."""
    orderBy: [OtherChildrenOrderBy!] = [PRIMARY_KEY_ASC]
  ): OtherChildrenConnection!

  """Reads and enables pagination through a set of \`OtherChild\`."""
  otherChildrenByParentIdList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OtherChildCondition

    """Only read the first \`n\` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeWhenParentByParentIdArchived: IncludeArchivedOption = INHERIT

    """Skip the first \`n\` values."""
    offset: Int

    """The method to use when ordering \`OtherChild\`."""
    orderBy: [OtherChildrenOrderBy!]
  ): [OtherChild!]!
  publishedAt: Datetime
  status: String!
}

"""
A condition to be used against \`Parent\` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ParentCondition {
  """Checks for equality with the object’s \`archivedAt\` field."""
  archivedAt: Datetime

  """Checks for equality with the object’s \`id\` field."""
  id: Int

  """Checks for equality with the object’s \`isArchived\` field."""
  isArchived: Boolean

  """Checks for equality with the object’s \`isPublished\` field."""
  isPublished: Boolean

  """Checks for equality with the object’s \`name\` field."""
  name: String

  """Checks for equality with the object’s \`publishedAt\` field."""
  publishedAt: Datetime

  """Checks for equality with the object’s \`status\` field."""
  status: String
}

"""An input for mutations affecting \`Parent\`"""
input ParentInput {
  archivedAt: Datetime
  id: Int!
  isArchived: Boolean
  isPublished: Boolean
  name: String
  publishedAt: Datetime
  status: String!
}

"""
Represents an update to a \`Parent\`. Fields that are set will be updated.
"""
input ParentPatch {
  archivedAt: Datetime
  id: Int
  isArchived: Boolean
  isPublished: Boolean
  name: String
  publishedAt: Datetime
  status: String
}

"""A connection to a list of \`Parent\` values."""
type ParentsConnection {
  """
  A list of edges which contains the \`Parent\` and cursor to aid in pagination.
  """
  edges: [ParentsEdge!]!

  """A list of \`Parent\` objects."""
  nodes: [Parent]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* \`Parent\` you could get from the connection."""
  totalCount: Int!
}

"""A \`Parent\` edge in the connection."""
type ParentsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The \`Parent\` at the end of the edge."""
  node: Parent
}

"""Methods to use when ordering \`Parent\`."""
enum ParentsOrderBy {
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  ID_ASC
  ID_DESC
  IS_ARCHIVED_ASC
  IS_ARCHIVED_DESC
  IS_PUBLISHED_ASC
  IS_PUBLISHED_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PUBLISHED_AT_ASC
  PUBLISHED_AT_DESC
  STATUS_ASC
  STATUS_DESC
}

"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """Reads and enables pagination through a set of \`Child\`."""
  allChildren(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChildCondition

    """Only read the first \`n\` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeWhenOrganizationByOrganizationIdArchived: IncludeArchivedOption = NO

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeWhenParentByParentIdArchived: IncludeArchivedOption = NO

    """Only read the last \`n\` values of the set."""
    last: Int

    """
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    """
    offset: Int

    """The method to use when ordering \`Child\`."""
    orderBy: [ChildrenOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChildrenConnection

  """Reads a set of \`Child\`."""
  allChildrenList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChildCondition

    """Only read the first \`n\` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeWhenOrganizationByOrganizationIdArchived: IncludeArchivedOption = NO

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeWhenParentByParentIdArchived: IncludeArchivedOption = NO

    """Skip the first \`n\` values."""
    offset: Int

    """The method to use when ordering \`Child\`."""
    orderBy: [ChildrenOrderBy!]
  ): [Child!]

  """Reads and enables pagination through a set of \`Organization\`."""
  allOrganizations(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OrganizationCondition

    """Only read the first \`n\` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last \`n\` values of the set."""
    last: Int

    """
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    """
    offset: Int

    """The method to use when ordering \`Organization\`."""
    orderBy: [OrganizationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganizationsConnection

  """Reads a set of \`Organization\`."""
  allOrganizationsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OrganizationCondition

    """Only read the first \`n\` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Skip the first \`n\` values."""
    offset: Int

    """The method to use when ordering \`Organization\`."""
    orderBy: [OrganizationsOrderBy!]
  ): [Organization!]

  """Reads and enables pagination through a set of \`OtherChild\`."""
  allOtherChildren(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OtherChildCondition

    """Only read the first \`n\` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeWhenParentByParentIdArchived: IncludeArchivedOption = NO

    """Only read the last \`n\` values of the set."""
    last: Int

    """
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    """
    offset: Int

    """The method to use when ordering \`OtherChild\`."""
    orderBy: [OtherChildrenOrderBy!] = [PRIMARY_KEY_ASC]
  ): OtherChildrenConnection

  """Reads a set of \`OtherChild\`."""
  allOtherChildrenList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OtherChildCondition

    """Only read the first \`n\` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeWhenParentByParentIdArchived: IncludeArchivedOption = NO

    """Skip the first \`n\` values."""
    offset: Int

    """The method to use when ordering \`OtherChild\`."""
    orderBy: [OtherChildrenOrderBy!]
  ): [OtherChild!]

  """Reads and enables pagination through a set of \`Parent\`."""
  allParents(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ParentCondition

    """Only read the first \`n\` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last \`n\` values of the set."""
    last: Int

    """
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    """
    offset: Int

    """The method to use when ordering \`Parent\`."""
    orderBy: [ParentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ParentsConnection

  """Reads a set of \`Parent\`."""
  allParentsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ParentCondition

    """Only read the first \`n\` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Skip the first \`n\` values."""
    offset: Int

    """The method to use when ordering \`Parent\`."""
    orderBy: [ParentsOrderBy!]
  ): [Parent!]

  """Reads a single \`Child\` using its globally unique \`ID\`."""
  child(
    """The globally unique \`ID\` to be used in selecting a single \`Child\`."""
    nodeId: ID!
  ): Child
  childById(id: Int!): Child

  """Fetches an object given its globally unique \`ID\`."""
  node(
    """The globally unique \`ID\`."""
    nodeId: ID!
  ): Node

  """
  The root query type must be a \`Node\` to work well with Relay 1 mutations. This just resolves to \`query\`.
  """
  nodeId: ID!

  """Reads a single \`Organization\` using its globally unique \`ID\`."""
  organization(
    """
    The globally unique \`ID\` to be used in selecting a single \`Organization\`.
    """
    nodeId: ID!
  ): Organization
  organizationById(id: Int!): Organization

  """Reads a single \`OtherChild\` using its globally unique \`ID\`."""
  otherChild(
    """
    The globally unique \`ID\` to be used in selecting a single \`OtherChild\`.
    """
    nodeId: ID!
  ): OtherChild
  otherChildById(id: Int!): OtherChild

  """Reads a single \`Parent\` using its globally unique \`ID\`."""
  parent(
    """The globally unique \`ID\` to be used in selecting a single \`Parent\`."""
    nodeId: ID!
  ): Parent
  parentById(id: Int!): Parent

  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!
}

"""All input for the \`updateChildById\` mutation."""
input UpdateChildByIdInput {
  """
  An object where the defined keys will be set on the \`Child\` being updated.
  """
  childPatch: ChildPatch!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the \`updateChild\` mutation."""
input UpdateChildInput {
  """
  An object where the defined keys will be set on the \`Child\` being updated.
  """
  childPatch: ChildPatch!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique \`ID\` which will identify a single \`Child\` to be updated.
  """
  nodeId: ID!
}

"""The output of our update \`Child\` mutation."""
type UpdateChildPayload {
  """The \`Child\` that was updated by this mutation."""
  child: Child

  """An edge for our \`Child\`. May be used by Relay 1."""
  childEdge(
    """The method to use when ordering \`Child\`."""
    orderBy: [ChildrenOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChildrenEdge

  """
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single \`Organization\` that is related to this \`Child\`."""
  organizationByOrganizationId: Organization

  """Reads a single \`Parent\` that is related to this \`Child\`."""
  parentByParentId: Parent

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the \`updateOrganizationById\` mutation."""
input UpdateOrganizationByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the \`Organization\` being updated.
  """
  organizationPatch: OrganizationPatch!
}

"""All input for the \`updateOrganization\` mutation."""
input UpdateOrganizationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique \`ID\` which will identify a single \`Organization\` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the \`Organization\` being updated.
  """
  organizationPatch: OrganizationPatch!
}

"""The output of our update \`Organization\` mutation."""
type UpdateOrganizationPayload {
  """
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The \`Organization\` that was updated by this mutation."""
  organization: Organization

  """An edge for our \`Organization\`. May be used by Relay 1."""
  organizationEdge(
    """The method to use when ordering \`Organization\`."""
    orderBy: [OrganizationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganizationsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the \`updateOtherChildById\` mutation."""
input UpdateOtherChildByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the \`OtherChild\` being updated.
  """
  otherChildPatch: OtherChildPatch!
}

"""All input for the \`updateOtherChild\` mutation."""
input UpdateOtherChildInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique \`ID\` which will identify a single \`OtherChild\` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the \`OtherChild\` being updated.
  """
  otherChildPatch: OtherChildPatch!
}

"""The output of our update \`OtherChild\` mutation."""
type UpdateOtherChildPayload {
  """
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The \`OtherChild\` that was updated by this mutation."""
  otherChild: OtherChild

  """An edge for our \`OtherChild\`. May be used by Relay 1."""
  otherChildEdge(
    """The method to use when ordering \`OtherChild\`."""
    orderBy: [OtherChildrenOrderBy!] = [PRIMARY_KEY_ASC]
  ): OtherChildrenEdge

  """Reads a single \`Parent\` that is related to this \`OtherChild\`."""
  parentByParentId: Parent

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the \`updateParentById\` mutation."""
input UpdateParentByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the \`Parent\` being updated.
  """
  parentPatch: ParentPatch!
}

"""All input for the \`updateParent\` mutation."""
input UpdateParentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique \`ID\` which will identify a single \`Parent\` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the \`Parent\` being updated.
  """
  parentPatch: ParentPatch!
}

"""The output of our update \`Parent\` mutation."""
type UpdateParentPayload {
  """
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The \`Parent\` that was updated by this mutation."""
  parent: Parent

  """An edge for our \`Parent\`. May be used by Relay 1."""
  parentEdge(
    """The method to use when ordering \`Parent\`."""
    orderBy: [ParentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ParentsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

`;

exports[`is_published schema matches snapshot 1`] = `
type Child implements Node {
  archivedAt: Datetime
  id: Int!
  isArchived: Boolean!
  isPublished: Boolean!
  name: String

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads a single \`Organization\` that is related to this \`Child\`."""
  organizationByOrganizationId: Organization
  organizationId: Int!

  """Reads a single \`Parent\` that is related to this \`Child\`."""
  parentByParentId: Parent
  parentId: Int!
  publishedAt: Datetime
  status: String!
}

"""
A condition to be used against \`Child\` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ChildCondition {
  """Checks for equality with the object’s \`archivedAt\` field."""
  archivedAt: Datetime

  """Checks for equality with the object’s \`id\` field."""
  id: Int

  """Checks for equality with the object’s \`isArchived\` field."""
  isArchived: Boolean

  """Checks for equality with the object’s \`isPublished\` field."""
  isPublished: Boolean

  """Checks for equality with the object’s \`name\` field."""
  name: String

  """Checks for equality with the object’s \`organizationId\` field."""
  organizationId: Int

  """Checks for equality with the object’s \`parentId\` field."""
  parentId: Int

  """Checks for equality with the object’s \`publishedAt\` field."""
  publishedAt: Datetime

  """Checks for equality with the object’s \`status\` field."""
  status: String
}

"""An input for mutations affecting \`Child\`"""
input ChildInput {
  archivedAt: Datetime
  id: Int!
  isArchived: Boolean
  isPublished: Boolean
  name: String
  organizationId: Int!
  parentId: Int!
  publishedAt: Datetime
  status: String!
}

"""
Represents an update to a \`Child\`. Fields that are set will be updated.
"""
input ChildPatch {
  archivedAt: Datetime
  id: Int
  isArchived: Boolean
  isPublished: Boolean
  name: String
  organizationId: Int
  parentId: Int
  publishedAt: Datetime
  status: String
}

"""A connection to a list of \`Child\` values."""
type ChildrenConnection {
  """
  A list of edges which contains the \`Child\` and cursor to aid in pagination.
  """
  edges: [ChildrenEdge!]!

  """A list of \`Child\` objects."""
  nodes: [Child]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* \`Child\` you could get from the connection."""
  totalCount: Int!
}

"""A \`Child\` edge in the connection."""
type ChildrenEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The \`Child\` at the end of the edge."""
  node: Child
}

"""Methods to use when ordering \`Child\`."""
enum ChildrenOrderBy {
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  ID_ASC
  ID_DESC
  IS_ARCHIVED_ASC
  IS_ARCHIVED_DESC
  IS_PUBLISHED_ASC
  IS_PUBLISHED_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  ORGANIZATION_ID_ASC
  ORGANIZATION_ID_DESC
  PARENT_ID_ASC
  PARENT_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PUBLISHED_AT_ASC
  PUBLISHED_AT_DESC
  STATUS_ASC
  STATUS_DESC
}

"""All input for the create \`Child\` mutation."""
input CreateChildInput {
  """The \`Child\` to be created by this mutation."""
  child: ChildInput!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our create \`Child\` mutation."""
type CreateChildPayload {
  """The \`Child\` that was created by this mutation."""
  child: Child

  """An edge for our \`Child\`. May be used by Relay 1."""
  childEdge(
    """The method to use when ordering \`Child\`."""
    orderBy: [ChildrenOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChildrenEdge

  """
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single \`Organization\` that is related to this \`Child\`."""
  organizationByOrganizationId: Organization

  """Reads a single \`Parent\` that is related to this \`Child\`."""
  parentByParentId: Parent

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create \`Organization\` mutation."""
input CreateOrganizationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The \`Organization\` to be created by this mutation."""
  organization: OrganizationInput!
}

"""The output of our create \`Organization\` mutation."""
type CreateOrganizationPayload {
  """
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The \`Organization\` that was created by this mutation."""
  organization: Organization

  """An edge for our \`Organization\`. May be used by Relay 1."""
  organizationEdge(
    """The method to use when ordering \`Organization\`."""
    orderBy: [OrganizationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganizationsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create \`OtherChild\` mutation."""
input CreateOtherChildInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The \`OtherChild\` to be created by this mutation."""
  otherChild: OtherChildInput!
}

"""The output of our create \`OtherChild\` mutation."""
type CreateOtherChildPayload {
  """
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The \`OtherChild\` that was created by this mutation."""
  otherChild: OtherChild

  """An edge for our \`OtherChild\`. May be used by Relay 1."""
  otherChildEdge(
    """The method to use when ordering \`OtherChild\`."""
    orderBy: [OtherChildrenOrderBy!] = [PRIMARY_KEY_ASC]
  ): OtherChildrenEdge

  """Reads a single \`Parent\` that is related to this \`OtherChild\`."""
  parentByParentId: Parent

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create \`Parent\` mutation."""
input CreateParentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The \`Parent\` to be created by this mutation."""
  parent: ParentInput!
}

"""The output of our create \`Parent\` mutation."""
type CreateParentPayload {
  """
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The \`Parent\` that was created by this mutation."""
  parent: Parent

  """An edge for our \`Parent\`. May be used by Relay 1."""
  parentEdge(
    """The method to use when ordering \`Parent\`."""
    orderBy: [ParentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ParentsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

"""All input for the \`deleteChildById\` mutation."""
input DeleteChildByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the \`deleteChild\` mutation."""
input DeleteChildInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique \`ID\` which will identify a single \`Child\` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete \`Child\` mutation."""
type DeleteChildPayload {
  """The \`Child\` that was deleted by this mutation."""
  child: Child

  """An edge for our \`Child\`. May be used by Relay 1."""
  childEdge(
    """The method to use when ordering \`Child\`."""
    orderBy: [ChildrenOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChildrenEdge

  """
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedChildId: ID

  """Reads a single \`Organization\` that is related to this \`Child\`."""
  organizationByOrganizationId: Organization

  """Reads a single \`Parent\` that is related to this \`Child\`."""
  parentByParentId: Parent

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the \`deleteOrganizationById\` mutation."""
input DeleteOrganizationByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the \`deleteOrganization\` mutation."""
input DeleteOrganizationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique \`ID\` which will identify a single \`Organization\` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete \`Organization\` mutation."""
type DeleteOrganizationPayload {
  """
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedOrganizationId: ID

  """The \`Organization\` that was deleted by this mutation."""
  organization: Organization

  """An edge for our \`Organization\`. May be used by Relay 1."""
  organizationEdge(
    """The method to use when ordering \`Organization\`."""
    orderBy: [OrganizationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganizationsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the \`deleteOtherChildById\` mutation."""
input DeleteOtherChildByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the \`deleteOtherChild\` mutation."""
input DeleteOtherChildInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique \`ID\` which will identify a single \`OtherChild\` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete \`OtherChild\` mutation."""
type DeleteOtherChildPayload {
  """
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedOtherChildId: ID

  """The \`OtherChild\` that was deleted by this mutation."""
  otherChild: OtherChild

  """An edge for our \`OtherChild\`. May be used by Relay 1."""
  otherChildEdge(
    """The method to use when ordering \`OtherChild\`."""
    orderBy: [OtherChildrenOrderBy!] = [PRIMARY_KEY_ASC]
  ): OtherChildrenEdge

  """Reads a single \`Parent\` that is related to this \`OtherChild\`."""
  parentByParentId: Parent

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the \`deleteParentById\` mutation."""
input DeleteParentByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the \`deleteParent\` mutation."""
input DeleteParentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique \`ID\` which will identify a single \`Parent\` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete \`Parent\` mutation."""
type DeleteParentPayload {
  """
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedParentId: ID

  """The \`Parent\` that was deleted by this mutation."""
  parent: Parent

  """An edge for our \`Parent\`. May be used by Relay 1."""
  parentEdge(
    """The method to use when ordering \`Parent\`."""
    orderBy: [ParentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ParentsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
Indicates whether draft items should be included in the results or not.
"""
enum IncludeDraftOption {
  """Only include draft items (i.e. exclude non-draft items)."""
  EXCLUSIVELY

  """
  If there is a parent GraphQL record and it is draft then this is equivalent to
  YES, in all other cases this is equivalent to NO.
  """
  INHERIT

  """Exclude draft items."""
  NO

  """Include draft items."""
  YES
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single \`Child\`."""
  createChild(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateChildInput!
  ): CreateChildPayload

  """Creates a single \`Organization\`."""
  createOrganization(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateOrganizationInput!
  ): CreateOrganizationPayload

  """Creates a single \`OtherChild\`."""
  createOtherChild(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateOtherChildInput!
  ): CreateOtherChildPayload

  """Creates a single \`Parent\`."""
  createParent(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateParentInput!
  ): CreateParentPayload

  """Deletes a single \`Child\` using its globally unique id."""
  deleteChild(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteChildInput!
  ): DeleteChildPayload

  """Deletes a single \`Child\` using a unique key."""
  deleteChildById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteChildByIdInput!
  ): DeleteChildPayload

  """Deletes a single \`Organization\` using its globally unique id."""
  deleteOrganization(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOrganizationInput!
  ): DeleteOrganizationPayload

  """Deletes a single \`Organization\` using a unique key."""
  deleteOrganizationById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOrganizationByIdInput!
  ): DeleteOrganizationPayload

  """Deletes a single \`OtherChild\` using its globally unique id."""
  deleteOtherChild(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOtherChildInput!
  ): DeleteOtherChildPayload

  """Deletes a single \`OtherChild\` using a unique key."""
  deleteOtherChildById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOtherChildByIdInput!
  ): DeleteOtherChildPayload

  """Deletes a single \`Parent\` using its globally unique id."""
  deleteParent(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteParentInput!
  ): DeleteParentPayload

  """Deletes a single \`Parent\` using a unique key."""
  deleteParentById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteParentByIdInput!
  ): DeleteParentPayload

  """Updates a single \`Child\` using its globally unique id and a patch."""
  updateChild(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateChildInput!
  ): UpdateChildPayload

  """Updates a single \`Child\` using a unique key and a patch."""
  updateChildById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateChildByIdInput!
  ): UpdateChildPayload

  """
  Updates a single \`Organization\` using its globally unique id and a patch.
  """
  updateOrganization(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOrganizationInput!
  ): UpdateOrganizationPayload

  """Updates a single \`Organization\` using a unique key and a patch."""
  updateOrganizationById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOrganizationByIdInput!
  ): UpdateOrganizationPayload

  """
  Updates a single \`OtherChild\` using its globally unique id and a patch.
  """
  updateOtherChild(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOtherChildInput!
  ): UpdateOtherChildPayload

  """Updates a single \`OtherChild\` using a unique key and a patch."""
  updateOtherChildById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOtherChildByIdInput!
  ): UpdateOtherChildPayload

  """Updates a single \`Parent\` using its globally unique id and a patch."""
  updateParent(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateParentInput!
  ): UpdateParentPayload

  """Updates a single \`Parent\` using a unique key and a patch."""
  updateParentById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateParentByIdInput!
  ): UpdateParentPayload
}

"""An object with a globally unique \`ID\`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

type Organization implements Node {
  archivedAt: Datetime

  """Reads and enables pagination through a set of \`Child\`."""
  childrenByOrganizationId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChildCondition

    """Only read the first \`n\` values of the set."""
    first: Int

    """
    Indicates whether draft items should be included in the results or not.
    """
    includeDraft: IncludeDraftOption = INHERIT

    """
    Indicates whether draft items should be included in the results or not.
    """
    includeWhenOrganizationByOrganizationIdDraft: IncludeDraftOption = INHERIT

    """
    Indicates whether draft items should be included in the results or not.
    """
    includeWhenParentByParentIdDraft: IncludeDraftOption = INHERIT

    """Only read the last \`n\` values of the set."""
    last: Int

    """
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    """
    offset: Int

    """The method to use when ordering \`Child\`."""
    orderBy: [ChildrenOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChildrenConnection!

  """Reads and enables pagination through a set of \`Child\`."""
  childrenByOrganizationIdList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChildCondition

    """Only read the first \`n\` values of the set."""
    first: Int

    """
    Indicates whether draft items should be included in the results or not.
    """
    includeDraft: IncludeDraftOption = INHERIT

    """
    Indicates whether draft items should be included in the results or not.
    """
    includeWhenOrganizationByOrganizationIdDraft: IncludeDraftOption = INHERIT

    """
    Indicates whether draft items should be included in the results or not.
    """
    includeWhenParentByParentIdDraft: IncludeDraftOption = INHERIT

    """Skip the first \`n\` values."""
    offset: Int

    """The method to use when ordering \`Child\`."""
    orderBy: [ChildrenOrderBy!]
  ): [Child!]!
  id: Int!
  isArchived: Boolean!
  isPublished: Boolean!
  name: String

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  publishedAt: Datetime
  status: String!
}

"""
A condition to be used against \`Organization\` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input OrganizationCondition {
  """Checks for equality with the object’s \`archivedAt\` field."""
  archivedAt: Datetime

  """Checks for equality with the object’s \`id\` field."""
  id: Int

  """Checks for equality with the object’s \`isArchived\` field."""
  isArchived: Boolean

  """Checks for equality with the object’s \`isPublished\` field."""
  isPublished: Boolean

  """Checks for equality with the object’s \`name\` field."""
  name: String

  """Checks for equality with the object’s \`publishedAt\` field."""
  publishedAt: Datetime

  """Checks for equality with the object’s \`status\` field."""
  status: String
}

"""An input for mutations affecting \`Organization\`"""
input OrganizationInput {
  archivedAt: Datetime
  id: Int!
  isArchived: Boolean
  isPublished: Boolean
  name: String
  publishedAt: Datetime
  status: String!
}

"""
Represents an update to a \`Organization\`. Fields that are set will be updated.
"""
input OrganizationPatch {
  archivedAt: Datetime
  id: Int
  isArchived: Boolean
  isPublished: Boolean
  name: String
  publishedAt: Datetime
  status: String
}

"""A connection to a list of \`Organization\` values."""
type OrganizationsConnection {
  """
  A list of edges which contains the \`Organization\` and cursor to aid in pagination.
  """
  edges: [OrganizationsEdge!]!

  """A list of \`Organization\` objects."""
  nodes: [Organization]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* \`Organization\` you could get from the connection."""
  totalCount: Int!
}

"""A \`Organization\` edge in the connection."""
type OrganizationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The \`Organization\` at the end of the edge."""
  node: Organization
}

"""Methods to use when ordering \`Organization\`."""
enum OrganizationsOrderBy {
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  ID_ASC
  ID_DESC
  IS_ARCHIVED_ASC
  IS_ARCHIVED_DESC
  IS_PUBLISHED_ASC
  IS_PUBLISHED_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PUBLISHED_AT_ASC
  PUBLISHED_AT_DESC
  STATUS_ASC
  STATUS_DESC
}

type OtherChild implements Node {
  id: Int!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads a single \`Parent\` that is related to this \`OtherChild\`."""
  parentByParentId: Parent
  parentId: Int!
  title: String
}

"""
A condition to be used against \`OtherChild\` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input OtherChildCondition {
  """Checks for equality with the object’s \`id\` field."""
  id: Int

  """Checks for equality with the object’s \`parentId\` field."""
  parentId: Int

  """Checks for equality with the object’s \`title\` field."""
  title: String
}

"""An input for mutations affecting \`OtherChild\`"""
input OtherChildInput {
  id: Int!
  parentId: Int!
  title: String
}

"""
Represents an update to a \`OtherChild\`. Fields that are set will be updated.
"""
input OtherChildPatch {
  id: Int
  parentId: Int
  title: String
}

"""A connection to a list of \`OtherChild\` values."""
type OtherChildrenConnection {
  """
  A list of edges which contains the \`OtherChild\` and cursor to aid in pagination.
  """
  edges: [OtherChildrenEdge!]!

  """A list of \`OtherChild\` objects."""
  nodes: [OtherChild]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* \`OtherChild\` you could get from the connection."""
  totalCount: Int!
}

"""A \`OtherChild\` edge in the connection."""
type OtherChildrenEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The \`OtherChild\` at the end of the edge."""
  node: OtherChild
}

"""Methods to use when ordering \`OtherChild\`."""
enum OtherChildrenOrderBy {
  ID_ASC
  ID_DESC
  NATURAL
  PARENT_ID_ASC
  PARENT_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  TITLE_ASC
  TITLE_DESC
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
}

type Parent implements Node {
  archivedAt: Datetime

  """Reads and enables pagination through a set of \`Child\`."""
  childrenByParentId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChildCondition

    """Only read the first \`n\` values of the set."""
    first: Int

    """
    Indicates whether draft items should be included in the results or not.
    """
    includeDraft: IncludeDraftOption = INHERIT

    """
    Indicates whether draft items should be included in the results or not.
    """
    includeWhenOrganizationByOrganizationIdDraft: IncludeDraftOption = INHERIT

    """
    Indicates whether draft items should be included in the results or not.
    """
    includeWhenParentByParentIdDraft: IncludeDraftOption = INHERIT

    """Only read the last \`n\` values of the set."""
    last: Int

    """
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    """
    offset: Int

    """The method to use when ordering \`Child\`."""
    orderBy: [ChildrenOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChildrenConnection!

  """Reads and enables pagination through a set of \`Child\`."""
  childrenByParentIdList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChildCondition

    """Only read the first \`n\` values of the set."""
    first: Int

    """
    Indicates whether draft items should be included in the results or not.
    """
    includeDraft: IncludeDraftOption = INHERIT

    """
    Indicates whether draft items should be included in the results or not.
    """
    includeWhenOrganizationByOrganizationIdDraft: IncludeDraftOption = INHERIT

    """
    Indicates whether draft items should be included in the results or not.
    """
    includeWhenParentByParentIdDraft: IncludeDraftOption = INHERIT

    """Skip the first \`n\` values."""
    offset: Int

    """The method to use when ordering \`Child\`."""
    orderBy: [ChildrenOrderBy!]
  ): [Child!]!
  id: Int!
  isArchived: Boolean!
  isPublished: Boolean!
  name: String

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads and enables pagination through a set of \`OtherChild\`."""
  otherChildrenByParentId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OtherChildCondition

    """Only read the first \`n\` values of the set."""
    first: Int

    """
    Indicates whether draft items should be included in the results or not.
    """
    includeWhenParentByParentIdDraft: IncludeDraftOption = INHERIT

    """Only read the last \`n\` values of the set."""
    last: Int

    """
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    """
    offset: Int

    """The method to use when ordering \`OtherChild\`."""
    orderBy: [OtherChildrenOrderBy!] = [PRIMARY_KEY_ASC]
  ): OtherChildrenConnection!

  """Reads and enables pagination through a set of \`OtherChild\`."""
  otherChildrenByParentIdList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OtherChildCondition

    """Only read the first \`n\` values of the set."""
    first: Int

    """
    Indicates whether draft items should be included in the results or not.
    """
    includeWhenParentByParentIdDraft: IncludeDraftOption = INHERIT

    """Skip the first \`n\` values."""
    offset: Int

    """The method to use when ordering \`OtherChild\`."""
    orderBy: [OtherChildrenOrderBy!]
  ): [OtherChild!]!
  publishedAt: Datetime
  status: String!
}

"""
A condition to be used against \`Parent\` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ParentCondition {
  """Checks for equality with the object’s \`archivedAt\` field."""
  archivedAt: Datetime

  """Checks for equality with the object’s \`id\` field."""
  id: Int

  """Checks for equality with the object’s \`isArchived\` field."""
  isArchived: Boolean

  """Checks for equality with the object’s \`isPublished\` field."""
  isPublished: Boolean

  """Checks for equality with the object’s \`name\` field."""
  name: String

  """Checks for equality with the object’s \`publishedAt\` field."""
  publishedAt: Datetime

  """Checks for equality with the object’s \`status\` field."""
  status: String
}

"""An input for mutations affecting \`Parent\`"""
input ParentInput {
  archivedAt: Datetime
  id: Int!
  isArchived: Boolean
  isPublished: Boolean
  name: String
  publishedAt: Datetime
  status: String!
}

"""
Represents an update to a \`Parent\`. Fields that are set will be updated.
"""
input ParentPatch {
  archivedAt: Datetime
  id: Int
  isArchived: Boolean
  isPublished: Boolean
  name: String
  publishedAt: Datetime
  status: String
}

"""A connection to a list of \`Parent\` values."""
type ParentsConnection {
  """
  A list of edges which contains the \`Parent\` and cursor to aid in pagination.
  """
  edges: [ParentsEdge!]!

  """A list of \`Parent\` objects."""
  nodes: [Parent]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* \`Parent\` you could get from the connection."""
  totalCount: Int!
}

"""A \`Parent\` edge in the connection."""
type ParentsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The \`Parent\` at the end of the edge."""
  node: Parent
}

"""Methods to use when ordering \`Parent\`."""
enum ParentsOrderBy {
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  ID_ASC
  ID_DESC
  IS_ARCHIVED_ASC
  IS_ARCHIVED_DESC
  IS_PUBLISHED_ASC
  IS_PUBLISHED_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PUBLISHED_AT_ASC
  PUBLISHED_AT_DESC
  STATUS_ASC
  STATUS_DESC
}

"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """Reads and enables pagination through a set of \`Child\`."""
  allChildren(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChildCondition

    """Only read the first \`n\` values of the set."""
    first: Int

    """
    Indicates whether draft items should be included in the results or not.
    """
    includeDraft: IncludeDraftOption = NO

    """
    Indicates whether draft items should be included in the results or not.
    """
    includeWhenOrganizationByOrganizationIdDraft: IncludeDraftOption = NO

    """
    Indicates whether draft items should be included in the results or not.
    """
    includeWhenParentByParentIdDraft: IncludeDraftOption = NO

    """Only read the last \`n\` values of the set."""
    last: Int

    """
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    """
    offset: Int

    """The method to use when ordering \`Child\`."""
    orderBy: [ChildrenOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChildrenConnection

  """Reads a set of \`Child\`."""
  allChildrenList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChildCondition

    """Only read the first \`n\` values of the set."""
    first: Int

    """
    Indicates whether draft items should be included in the results or not.
    """
    includeDraft: IncludeDraftOption = NO

    """
    Indicates whether draft items should be included in the results or not.
    """
    includeWhenOrganizationByOrganizationIdDraft: IncludeDraftOption = NO

    """
    Indicates whether draft items should be included in the results or not.
    """
    includeWhenParentByParentIdDraft: IncludeDraftOption = NO

    """Skip the first \`n\` values."""
    offset: Int

    """The method to use when ordering \`Child\`."""
    orderBy: [ChildrenOrderBy!]
  ): [Child!]

  """Reads and enables pagination through a set of \`Organization\`."""
  allOrganizations(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OrganizationCondition

    """Only read the first \`n\` values of the set."""
    first: Int

    """
    Indicates whether draft items should be included in the results or not.
    """
    includeDraft: IncludeDraftOption = NO

    """Only read the last \`n\` values of the set."""
    last: Int

    """
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    """
    offset: Int

    """The method to use when ordering \`Organization\`."""
    orderBy: [OrganizationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganizationsConnection

  """Reads a set of \`Organization\`."""
  allOrganizationsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OrganizationCondition

    """Only read the first \`n\` values of the set."""
    first: Int

    """
    Indicates whether draft items should be included in the results or not.
    """
    includeDraft: IncludeDraftOption = NO

    """Skip the first \`n\` values."""
    offset: Int

    """The method to use when ordering \`Organization\`."""
    orderBy: [OrganizationsOrderBy!]
  ): [Organization!]

  """Reads and enables pagination through a set of \`OtherChild\`."""
  allOtherChildren(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OtherChildCondition

    """Only read the first \`n\` values of the set."""
    first: Int

    """
    Indicates whether draft items should be included in the results or not.
    """
    includeWhenParentByParentIdDraft: IncludeDraftOption = NO

    """Only read the last \`n\` values of the set."""
    last: Int

    """
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    """
    offset: Int

    """The method to use when ordering \`OtherChild\`."""
    orderBy: [OtherChildrenOrderBy!] = [PRIMARY_KEY_ASC]
  ): OtherChildrenConnection

  """Reads a set of \`OtherChild\`."""
  allOtherChildrenList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OtherChildCondition

    """Only read the first \`n\` values of the set."""
    first: Int

    """
    Indicates whether draft items should be included in the results or not.
    """
    includeWhenParentByParentIdDraft: IncludeDraftOption = NO

    """Skip the first \`n\` values."""
    offset: Int

    """The method to use when ordering \`OtherChild\`."""
    orderBy: [OtherChildrenOrderBy!]
  ): [OtherChild!]

  """Reads and enables pagination through a set of \`Parent\`."""
  allParents(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ParentCondition

    """Only read the first \`n\` values of the set."""
    first: Int

    """
    Indicates whether draft items should be included in the results or not.
    """
    includeDraft: IncludeDraftOption = NO

    """Only read the last \`n\` values of the set."""
    last: Int

    """
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    """
    offset: Int

    """The method to use when ordering \`Parent\`."""
    orderBy: [ParentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ParentsConnection

  """Reads a set of \`Parent\`."""
  allParentsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ParentCondition

    """Only read the first \`n\` values of the set."""
    first: Int

    """
    Indicates whether draft items should be included in the results or not.
    """
    includeDraft: IncludeDraftOption = NO

    """Skip the first \`n\` values."""
    offset: Int

    """The method to use when ordering \`Parent\`."""
    orderBy: [ParentsOrderBy!]
  ): [Parent!]

  """Reads a single \`Child\` using its globally unique \`ID\`."""
  child(
    """The globally unique \`ID\` to be used in selecting a single \`Child\`."""
    nodeId: ID!
  ): Child
  childById(id: Int!): Child

  """Fetches an object given its globally unique \`ID\`."""
  node(
    """The globally unique \`ID\`."""
    nodeId: ID!
  ): Node

  """
  The root query type must be a \`Node\` to work well with Relay 1 mutations. This just resolves to \`query\`.
  """
  nodeId: ID!

  """Reads a single \`Organization\` using its globally unique \`ID\`."""
  organization(
    """
    The globally unique \`ID\` to be used in selecting a single \`Organization\`.
    """
    nodeId: ID!
  ): Organization
  organizationById(id: Int!): Organization

  """Reads a single \`OtherChild\` using its globally unique \`ID\`."""
  otherChild(
    """
    The globally unique \`ID\` to be used in selecting a single \`OtherChild\`.
    """
    nodeId: ID!
  ): OtherChild
  otherChildById(id: Int!): OtherChild

  """Reads a single \`Parent\` using its globally unique \`ID\`."""
  parent(
    """The globally unique \`ID\` to be used in selecting a single \`Parent\`."""
    nodeId: ID!
  ): Parent
  parentById(id: Int!): Parent

  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!
}

"""All input for the \`updateChildById\` mutation."""
input UpdateChildByIdInput {
  """
  An object where the defined keys will be set on the \`Child\` being updated.
  """
  childPatch: ChildPatch!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the \`updateChild\` mutation."""
input UpdateChildInput {
  """
  An object where the defined keys will be set on the \`Child\` being updated.
  """
  childPatch: ChildPatch!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique \`ID\` which will identify a single \`Child\` to be updated.
  """
  nodeId: ID!
}

"""The output of our update \`Child\` mutation."""
type UpdateChildPayload {
  """The \`Child\` that was updated by this mutation."""
  child: Child

  """An edge for our \`Child\`. May be used by Relay 1."""
  childEdge(
    """The method to use when ordering \`Child\`."""
    orderBy: [ChildrenOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChildrenEdge

  """
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single \`Organization\` that is related to this \`Child\`."""
  organizationByOrganizationId: Organization

  """Reads a single \`Parent\` that is related to this \`Child\`."""
  parentByParentId: Parent

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the \`updateOrganizationById\` mutation."""
input UpdateOrganizationByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the \`Organization\` being updated.
  """
  organizationPatch: OrganizationPatch!
}

"""All input for the \`updateOrganization\` mutation."""
input UpdateOrganizationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique \`ID\` which will identify a single \`Organization\` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the \`Organization\` being updated.
  """
  organizationPatch: OrganizationPatch!
}

"""The output of our update \`Organization\` mutation."""
type UpdateOrganizationPayload {
  """
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The \`Organization\` that was updated by this mutation."""
  organization: Organization

  """An edge for our \`Organization\`. May be used by Relay 1."""
  organizationEdge(
    """The method to use when ordering \`Organization\`."""
    orderBy: [OrganizationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganizationsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the \`updateOtherChildById\` mutation."""
input UpdateOtherChildByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the \`OtherChild\` being updated.
  """
  otherChildPatch: OtherChildPatch!
}

"""All input for the \`updateOtherChild\` mutation."""
input UpdateOtherChildInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique \`ID\` which will identify a single \`OtherChild\` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the \`OtherChild\` being updated.
  """
  otherChildPatch: OtherChildPatch!
}

"""The output of our update \`OtherChild\` mutation."""
type UpdateOtherChildPayload {
  """
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The \`OtherChild\` that was updated by this mutation."""
  otherChild: OtherChild

  """An edge for our \`OtherChild\`. May be used by Relay 1."""
  otherChildEdge(
    """The method to use when ordering \`OtherChild\`."""
    orderBy: [OtherChildrenOrderBy!] = [PRIMARY_KEY_ASC]
  ): OtherChildrenEdge

  """Reads a single \`Parent\` that is related to this \`OtherChild\`."""
  parentByParentId: Parent

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the \`updateParentById\` mutation."""
input UpdateParentByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the \`Parent\` being updated.
  """
  parentPatch: ParentPatch!
}

"""All input for the \`updateParent\` mutation."""
input UpdateParentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique \`ID\` which will identify a single \`Parent\` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the \`Parent\` being updated.
  """
  parentPatch: ParentPatch!
}

"""The output of our update \`Parent\` mutation."""
type UpdateParentPayload {
  """
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The \`Parent\` that was updated by this mutation."""
  parent: Parent

  """An edge for our \`Parent\`. May be used by Relay 1."""
  parentEdge(
    """The method to use when ordering \`Parent\`."""
    orderBy: [ParentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ParentsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

`;

exports[`published_at schema matches snapshot 1`] = `
type Child implements Node {
  archivedAt: Datetime
  id: Int!
  isArchived: Boolean!
  isPublished: Boolean!
  name: String

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads a single \`Organization\` that is related to this \`Child\`."""
  organizationByOrganizationId: Organization
  organizationId: Int!

  """Reads a single \`Parent\` that is related to this \`Child\`."""
  parentByParentId: Parent
  parentId: Int!
  publishedAt: Datetime
  status: String!
}

"""
A condition to be used against \`Child\` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ChildCondition {
  """Checks for equality with the object’s \`archivedAt\` field."""
  archivedAt: Datetime

  """Checks for equality with the object’s \`id\` field."""
  id: Int

  """Checks for equality with the object’s \`isArchived\` field."""
  isArchived: Boolean

  """Checks for equality with the object’s \`isPublished\` field."""
  isPublished: Boolean

  """Checks for equality with the object’s \`name\` field."""
  name: String

  """Checks for equality with the object’s \`organizationId\` field."""
  organizationId: Int

  """Checks for equality with the object’s \`parentId\` field."""
  parentId: Int

  """Checks for equality with the object’s \`publishedAt\` field."""
  publishedAt: Datetime

  """Checks for equality with the object’s \`status\` field."""
  status: String
}

"""An input for mutations affecting \`Child\`"""
input ChildInput {
  archivedAt: Datetime
  id: Int!
  isArchived: Boolean
  isPublished: Boolean
  name: String
  organizationId: Int!
  parentId: Int!
  publishedAt: Datetime
  status: String!
}

"""
Represents an update to a \`Child\`. Fields that are set will be updated.
"""
input ChildPatch {
  archivedAt: Datetime
  id: Int
  isArchived: Boolean
  isPublished: Boolean
  name: String
  organizationId: Int
  parentId: Int
  publishedAt: Datetime
  status: String
}

"""A connection to a list of \`Child\` values."""
type ChildrenConnection {
  """
  A list of edges which contains the \`Child\` and cursor to aid in pagination.
  """
  edges: [ChildrenEdge!]!

  """A list of \`Child\` objects."""
  nodes: [Child]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* \`Child\` you could get from the connection."""
  totalCount: Int!
}

"""A \`Child\` edge in the connection."""
type ChildrenEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The \`Child\` at the end of the edge."""
  node: Child
}

"""Methods to use when ordering \`Child\`."""
enum ChildrenOrderBy {
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  ID_ASC
  ID_DESC
  IS_ARCHIVED_ASC
  IS_ARCHIVED_DESC
  IS_PUBLISHED_ASC
  IS_PUBLISHED_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  ORGANIZATION_ID_ASC
  ORGANIZATION_ID_DESC
  PARENT_ID_ASC
  PARENT_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PUBLISHED_AT_ASC
  PUBLISHED_AT_DESC
  STATUS_ASC
  STATUS_DESC
}

"""All input for the create \`Child\` mutation."""
input CreateChildInput {
  """The \`Child\` to be created by this mutation."""
  child: ChildInput!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our create \`Child\` mutation."""
type CreateChildPayload {
  """The \`Child\` that was created by this mutation."""
  child: Child

  """An edge for our \`Child\`. May be used by Relay 1."""
  childEdge(
    """The method to use when ordering \`Child\`."""
    orderBy: [ChildrenOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChildrenEdge

  """
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single \`Organization\` that is related to this \`Child\`."""
  organizationByOrganizationId: Organization

  """Reads a single \`Parent\` that is related to this \`Child\`."""
  parentByParentId: Parent

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create \`Organization\` mutation."""
input CreateOrganizationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The \`Organization\` to be created by this mutation."""
  organization: OrganizationInput!
}

"""The output of our create \`Organization\` mutation."""
type CreateOrganizationPayload {
  """
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The \`Organization\` that was created by this mutation."""
  organization: Organization

  """An edge for our \`Organization\`. May be used by Relay 1."""
  organizationEdge(
    """The method to use when ordering \`Organization\`."""
    orderBy: [OrganizationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganizationsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create \`OtherChild\` mutation."""
input CreateOtherChildInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The \`OtherChild\` to be created by this mutation."""
  otherChild: OtherChildInput!
}

"""The output of our create \`OtherChild\` mutation."""
type CreateOtherChildPayload {
  """
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The \`OtherChild\` that was created by this mutation."""
  otherChild: OtherChild

  """An edge for our \`OtherChild\`. May be used by Relay 1."""
  otherChildEdge(
    """The method to use when ordering \`OtherChild\`."""
    orderBy: [OtherChildrenOrderBy!] = [PRIMARY_KEY_ASC]
  ): OtherChildrenEdge

  """Reads a single \`Parent\` that is related to this \`OtherChild\`."""
  parentByParentId: Parent

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create \`Parent\` mutation."""
input CreateParentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The \`Parent\` to be created by this mutation."""
  parent: ParentInput!
}

"""The output of our create \`Parent\` mutation."""
type CreateParentPayload {
  """
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The \`Parent\` that was created by this mutation."""
  parent: Parent

  """An edge for our \`Parent\`. May be used by Relay 1."""
  parentEdge(
    """The method to use when ordering \`Parent\`."""
    orderBy: [ParentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ParentsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

"""All input for the \`deleteChildById\` mutation."""
input DeleteChildByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the \`deleteChild\` mutation."""
input DeleteChildInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique \`ID\` which will identify a single \`Child\` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete \`Child\` mutation."""
type DeleteChildPayload {
  """The \`Child\` that was deleted by this mutation."""
  child: Child

  """An edge for our \`Child\`. May be used by Relay 1."""
  childEdge(
    """The method to use when ordering \`Child\`."""
    orderBy: [ChildrenOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChildrenEdge

  """
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedChildId: ID

  """Reads a single \`Organization\` that is related to this \`Child\`."""
  organizationByOrganizationId: Organization

  """Reads a single \`Parent\` that is related to this \`Child\`."""
  parentByParentId: Parent

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the \`deleteOrganizationById\` mutation."""
input DeleteOrganizationByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the \`deleteOrganization\` mutation."""
input DeleteOrganizationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique \`ID\` which will identify a single \`Organization\` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete \`Organization\` mutation."""
type DeleteOrganizationPayload {
  """
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedOrganizationId: ID

  """The \`Organization\` that was deleted by this mutation."""
  organization: Organization

  """An edge for our \`Organization\`. May be used by Relay 1."""
  organizationEdge(
    """The method to use when ordering \`Organization\`."""
    orderBy: [OrganizationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganizationsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the \`deleteOtherChildById\` mutation."""
input DeleteOtherChildByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the \`deleteOtherChild\` mutation."""
input DeleteOtherChildInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique \`ID\` which will identify a single \`OtherChild\` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete \`OtherChild\` mutation."""
type DeleteOtherChildPayload {
  """
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedOtherChildId: ID

  """The \`OtherChild\` that was deleted by this mutation."""
  otherChild: OtherChild

  """An edge for our \`OtherChild\`. May be used by Relay 1."""
  otherChildEdge(
    """The method to use when ordering \`OtherChild\`."""
    orderBy: [OtherChildrenOrderBy!] = [PRIMARY_KEY_ASC]
  ): OtherChildrenEdge

  """Reads a single \`Parent\` that is related to this \`OtherChild\`."""
  parentByParentId: Parent

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the \`deleteParentById\` mutation."""
input DeleteParentByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the \`deleteParent\` mutation."""
input DeleteParentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique \`ID\` which will identify a single \`Parent\` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete \`Parent\` mutation."""
type DeleteParentPayload {
  """
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedParentId: ID

  """The \`Parent\` that was deleted by this mutation."""
  parent: Parent

  """An edge for our \`Parent\`. May be used by Relay 1."""
  parentEdge(
    """The method to use when ordering \`Parent\`."""
    orderBy: [ParentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ParentsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
Indicates whether draft items should be included in the results or not.
"""
enum IncludeDraftOption {
  """Only include draft items (i.e. exclude non-draft items)."""
  EXCLUSIVELY

  """
  If there is a parent GraphQL record and it is draft then this is equivalent to
  YES, in all other cases this is equivalent to NO.
  """
  INHERIT

  """Exclude draft items."""
  NO

  """Include draft items."""
  YES
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single \`Child\`."""
  createChild(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateChildInput!
  ): CreateChildPayload

  """Creates a single \`Organization\`."""
  createOrganization(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateOrganizationInput!
  ): CreateOrganizationPayload

  """Creates a single \`OtherChild\`."""
  createOtherChild(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateOtherChildInput!
  ): CreateOtherChildPayload

  """Creates a single \`Parent\`."""
  createParent(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateParentInput!
  ): CreateParentPayload

  """Deletes a single \`Child\` using its globally unique id."""
  deleteChild(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteChildInput!
  ): DeleteChildPayload

  """Deletes a single \`Child\` using a unique key."""
  deleteChildById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteChildByIdInput!
  ): DeleteChildPayload

  """Deletes a single \`Organization\` using its globally unique id."""
  deleteOrganization(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOrganizationInput!
  ): DeleteOrganizationPayload

  """Deletes a single \`Organization\` using a unique key."""
  deleteOrganizationById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOrganizationByIdInput!
  ): DeleteOrganizationPayload

  """Deletes a single \`OtherChild\` using its globally unique id."""
  deleteOtherChild(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOtherChildInput!
  ): DeleteOtherChildPayload

  """Deletes a single \`OtherChild\` using a unique key."""
  deleteOtherChildById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOtherChildByIdInput!
  ): DeleteOtherChildPayload

  """Deletes a single \`Parent\` using its globally unique id."""
  deleteParent(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteParentInput!
  ): DeleteParentPayload

  """Deletes a single \`Parent\` using a unique key."""
  deleteParentById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteParentByIdInput!
  ): DeleteParentPayload

  """Updates a single \`Child\` using its globally unique id and a patch."""
  updateChild(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateChildInput!
  ): UpdateChildPayload

  """Updates a single \`Child\` using a unique key and a patch."""
  updateChildById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateChildByIdInput!
  ): UpdateChildPayload

  """
  Updates a single \`Organization\` using its globally unique id and a patch.
  """
  updateOrganization(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOrganizationInput!
  ): UpdateOrganizationPayload

  """Updates a single \`Organization\` using a unique key and a patch."""
  updateOrganizationById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOrganizationByIdInput!
  ): UpdateOrganizationPayload

  """
  Updates a single \`OtherChild\` using its globally unique id and a patch.
  """
  updateOtherChild(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOtherChildInput!
  ): UpdateOtherChildPayload

  """Updates a single \`OtherChild\` using a unique key and a patch."""
  updateOtherChildById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOtherChildByIdInput!
  ): UpdateOtherChildPayload

  """Updates a single \`Parent\` using its globally unique id and a patch."""
  updateParent(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateParentInput!
  ): UpdateParentPayload

  """Updates a single \`Parent\` using a unique key and a patch."""
  updateParentById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateParentByIdInput!
  ): UpdateParentPayload
}

"""An object with a globally unique \`ID\`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

type Organization implements Node {
  archivedAt: Datetime

  """Reads and enables pagination through a set of \`Child\`."""
  childrenByOrganizationId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChildCondition

    """Only read the first \`n\` values of the set."""
    first: Int

    """
    Indicates whether draft items should be included in the results or not.
    """
    includeDraft: IncludeDraftOption = INHERIT

    """
    Indicates whether draft items should be included in the results or not.
    """
    includeWhenOrganizationByOrganizationIdDraft: IncludeDraftOption = INHERIT

    """
    Indicates whether draft items should be included in the results or not.
    """
    includeWhenParentByParentIdDraft: IncludeDraftOption = INHERIT

    """Only read the last \`n\` values of the set."""
    last: Int

    """
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    """
    offset: Int

    """The method to use when ordering \`Child\`."""
    orderBy: [ChildrenOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChildrenConnection!

  """Reads and enables pagination through a set of \`Child\`."""
  childrenByOrganizationIdList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChildCondition

    """Only read the first \`n\` values of the set."""
    first: Int

    """
    Indicates whether draft items should be included in the results or not.
    """
    includeDraft: IncludeDraftOption = INHERIT

    """
    Indicates whether draft items should be included in the results or not.
    """
    includeWhenOrganizationByOrganizationIdDraft: IncludeDraftOption = INHERIT

    """
    Indicates whether draft items should be included in the results or not.
    """
    includeWhenParentByParentIdDraft: IncludeDraftOption = INHERIT

    """Skip the first \`n\` values."""
    offset: Int

    """The method to use when ordering \`Child\`."""
    orderBy: [ChildrenOrderBy!]
  ): [Child!]!
  id: Int!
  isArchived: Boolean!
  isPublished: Boolean!
  name: String

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  publishedAt: Datetime
  status: String!
}

"""
A condition to be used against \`Organization\` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input OrganizationCondition {
  """Checks for equality with the object’s \`archivedAt\` field."""
  archivedAt: Datetime

  """Checks for equality with the object’s \`id\` field."""
  id: Int

  """Checks for equality with the object’s \`isArchived\` field."""
  isArchived: Boolean

  """Checks for equality with the object’s \`isPublished\` field."""
  isPublished: Boolean

  """Checks for equality with the object’s \`name\` field."""
  name: String

  """Checks for equality with the object’s \`publishedAt\` field."""
  publishedAt: Datetime

  """Checks for equality with the object’s \`status\` field."""
  status: String
}

"""An input for mutations affecting \`Organization\`"""
input OrganizationInput {
  archivedAt: Datetime
  id: Int!
  isArchived: Boolean
  isPublished: Boolean
  name: String
  publishedAt: Datetime
  status: String!
}

"""
Represents an update to a \`Organization\`. Fields that are set will be updated.
"""
input OrganizationPatch {
  archivedAt: Datetime
  id: Int
  isArchived: Boolean
  isPublished: Boolean
  name: String
  publishedAt: Datetime
  status: String
}

"""A connection to a list of \`Organization\` values."""
type OrganizationsConnection {
  """
  A list of edges which contains the \`Organization\` and cursor to aid in pagination.
  """
  edges: [OrganizationsEdge!]!

  """A list of \`Organization\` objects."""
  nodes: [Organization]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* \`Organization\` you could get from the connection."""
  totalCount: Int!
}

"""A \`Organization\` edge in the connection."""
type OrganizationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The \`Organization\` at the end of the edge."""
  node: Organization
}

"""Methods to use when ordering \`Organization\`."""
enum OrganizationsOrderBy {
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  ID_ASC
  ID_DESC
  IS_ARCHIVED_ASC
  IS_ARCHIVED_DESC
  IS_PUBLISHED_ASC
  IS_PUBLISHED_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PUBLISHED_AT_ASC
  PUBLISHED_AT_DESC
  STATUS_ASC
  STATUS_DESC
}

type OtherChild implements Node {
  id: Int!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads a single \`Parent\` that is related to this \`OtherChild\`."""
  parentByParentId: Parent
  parentId: Int!
  title: String
}

"""
A condition to be used against \`OtherChild\` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input OtherChildCondition {
  """Checks for equality with the object’s \`id\` field."""
  id: Int

  """Checks for equality with the object’s \`parentId\` field."""
  parentId: Int

  """Checks for equality with the object’s \`title\` field."""
  title: String
}

"""An input for mutations affecting \`OtherChild\`"""
input OtherChildInput {
  id: Int!
  parentId: Int!
  title: String
}

"""
Represents an update to a \`OtherChild\`. Fields that are set will be updated.
"""
input OtherChildPatch {
  id: Int
  parentId: Int
  title: String
}

"""A connection to a list of \`OtherChild\` values."""
type OtherChildrenConnection {
  """
  A list of edges which contains the \`OtherChild\` and cursor to aid in pagination.
  """
  edges: [OtherChildrenEdge!]!

  """A list of \`OtherChild\` objects."""
  nodes: [OtherChild]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* \`OtherChild\` you could get from the connection."""
  totalCount: Int!
}

"""A \`OtherChild\` edge in the connection."""
type OtherChildrenEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The \`OtherChild\` at the end of the edge."""
  node: OtherChild
}

"""Methods to use when ordering \`OtherChild\`."""
enum OtherChildrenOrderBy {
  ID_ASC
  ID_DESC
  NATURAL
  PARENT_ID_ASC
  PARENT_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  TITLE_ASC
  TITLE_DESC
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
}

type Parent implements Node {
  archivedAt: Datetime

  """Reads and enables pagination through a set of \`Child\`."""
  childrenByParentId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChildCondition

    """Only read the first \`n\` values of the set."""
    first: Int

    """
    Indicates whether draft items should be included in the results or not.
    """
    includeDraft: IncludeDraftOption = INHERIT

    """
    Indicates whether draft items should be included in the results or not.
    """
    includeWhenOrganizationByOrganizationIdDraft: IncludeDraftOption = INHERIT

    """
    Indicates whether draft items should be included in the results or not.
    """
    includeWhenParentByParentIdDraft: IncludeDraftOption = INHERIT

    """Only read the last \`n\` values of the set."""
    last: Int

    """
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    """
    offset: Int

    """The method to use when ordering \`Child\`."""
    orderBy: [ChildrenOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChildrenConnection!

  """Reads and enables pagination through a set of \`Child\`."""
  childrenByParentIdList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChildCondition

    """Only read the first \`n\` values of the set."""
    first: Int

    """
    Indicates whether draft items should be included in the results or not.
    """
    includeDraft: IncludeDraftOption = INHERIT

    """
    Indicates whether draft items should be included in the results or not.
    """
    includeWhenOrganizationByOrganizationIdDraft: IncludeDraftOption = INHERIT

    """
    Indicates whether draft items should be included in the results or not.
    """
    includeWhenParentByParentIdDraft: IncludeDraftOption = INHERIT

    """Skip the first \`n\` values."""
    offset: Int

    """The method to use when ordering \`Child\`."""
    orderBy: [ChildrenOrderBy!]
  ): [Child!]!
  id: Int!
  isArchived: Boolean!
  isPublished: Boolean!
  name: String

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads and enables pagination through a set of \`OtherChild\`."""
  otherChildrenByParentId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OtherChildCondition

    """Only read the first \`n\` values of the set."""
    first: Int

    """
    Indicates whether draft items should be included in the results or not.
    """
    includeWhenParentByParentIdDraft: IncludeDraftOption = INHERIT

    """Only read the last \`n\` values of the set."""
    last: Int

    """
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    """
    offset: Int

    """The method to use when ordering \`OtherChild\`."""
    orderBy: [OtherChildrenOrderBy!] = [PRIMARY_KEY_ASC]
  ): OtherChildrenConnection!

  """Reads and enables pagination through a set of \`OtherChild\`."""
  otherChildrenByParentIdList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OtherChildCondition

    """Only read the first \`n\` values of the set."""
    first: Int

    """
    Indicates whether draft items should be included in the results or not.
    """
    includeWhenParentByParentIdDraft: IncludeDraftOption = INHERIT

    """Skip the first \`n\` values."""
    offset: Int

    """The method to use when ordering \`OtherChild\`."""
    orderBy: [OtherChildrenOrderBy!]
  ): [OtherChild!]!
  publishedAt: Datetime
  status: String!
}

"""
A condition to be used against \`Parent\` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ParentCondition {
  """Checks for equality with the object’s \`archivedAt\` field."""
  archivedAt: Datetime

  """Checks for equality with the object’s \`id\` field."""
  id: Int

  """Checks for equality with the object’s \`isArchived\` field."""
  isArchived: Boolean

  """Checks for equality with the object’s \`isPublished\` field."""
  isPublished: Boolean

  """Checks for equality with the object’s \`name\` field."""
  name: String

  """Checks for equality with the object’s \`publishedAt\` field."""
  publishedAt: Datetime

  """Checks for equality with the object’s \`status\` field."""
  status: String
}

"""An input for mutations affecting \`Parent\`"""
input ParentInput {
  archivedAt: Datetime
  id: Int!
  isArchived: Boolean
  isPublished: Boolean
  name: String
  publishedAt: Datetime
  status: String!
}

"""
Represents an update to a \`Parent\`. Fields that are set will be updated.
"""
input ParentPatch {
  archivedAt: Datetime
  id: Int
  isArchived: Boolean
  isPublished: Boolean
  name: String
  publishedAt: Datetime
  status: String
}

"""A connection to a list of \`Parent\` values."""
type ParentsConnection {
  """
  A list of edges which contains the \`Parent\` and cursor to aid in pagination.
  """
  edges: [ParentsEdge!]!

  """A list of \`Parent\` objects."""
  nodes: [Parent]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* \`Parent\` you could get from the connection."""
  totalCount: Int!
}

"""A \`Parent\` edge in the connection."""
type ParentsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The \`Parent\` at the end of the edge."""
  node: Parent
}

"""Methods to use when ordering \`Parent\`."""
enum ParentsOrderBy {
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  ID_ASC
  ID_DESC
  IS_ARCHIVED_ASC
  IS_ARCHIVED_DESC
  IS_PUBLISHED_ASC
  IS_PUBLISHED_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PUBLISHED_AT_ASC
  PUBLISHED_AT_DESC
  STATUS_ASC
  STATUS_DESC
}

"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """Reads and enables pagination through a set of \`Child\`."""
  allChildren(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChildCondition

    """Only read the first \`n\` values of the set."""
    first: Int

    """
    Indicates whether draft items should be included in the results or not.
    """
    includeDraft: IncludeDraftOption = NO

    """
    Indicates whether draft items should be included in the results or not.
    """
    includeWhenOrganizationByOrganizationIdDraft: IncludeDraftOption = NO

    """
    Indicates whether draft items should be included in the results or not.
    """
    includeWhenParentByParentIdDraft: IncludeDraftOption = NO

    """Only read the last \`n\` values of the set."""
    last: Int

    """
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    """
    offset: Int

    """The method to use when ordering \`Child\`."""
    orderBy: [ChildrenOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChildrenConnection

  """Reads a set of \`Child\`."""
  allChildrenList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChildCondition

    """Only read the first \`n\` values of the set."""
    first: Int

    """
    Indicates whether draft items should be included in the results or not.
    """
    includeDraft: IncludeDraftOption = NO

    """
    Indicates whether draft items should be included in the results or not.
    """
    includeWhenOrganizationByOrganizationIdDraft: IncludeDraftOption = NO

    """
    Indicates whether draft items should be included in the results or not.
    """
    includeWhenParentByParentIdDraft: IncludeDraftOption = NO

    """Skip the first \`n\` values."""
    offset: Int

    """The method to use when ordering \`Child\`."""
    orderBy: [ChildrenOrderBy!]
  ): [Child!]

  """Reads and enables pagination through a set of \`Organization\`."""
  allOrganizations(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OrganizationCondition

    """Only read the first \`n\` values of the set."""
    first: Int

    """
    Indicates whether draft items should be included in the results or not.
    """
    includeDraft: IncludeDraftOption = NO

    """Only read the last \`n\` values of the set."""
    last: Int

    """
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    """
    offset: Int

    """The method to use when ordering \`Organization\`."""
    orderBy: [OrganizationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganizationsConnection

  """Reads a set of \`Organization\`."""
  allOrganizationsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OrganizationCondition

    """Only read the first \`n\` values of the set."""
    first: Int

    """
    Indicates whether draft items should be included in the results or not.
    """
    includeDraft: IncludeDraftOption = NO

    """Skip the first \`n\` values."""
    offset: Int

    """The method to use when ordering \`Organization\`."""
    orderBy: [OrganizationsOrderBy!]
  ): [Organization!]

  """Reads and enables pagination through a set of \`OtherChild\`."""
  allOtherChildren(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OtherChildCondition

    """Only read the first \`n\` values of the set."""
    first: Int

    """
    Indicates whether draft items should be included in the results or not.
    """
    includeWhenParentByParentIdDraft: IncludeDraftOption = NO

    """Only read the last \`n\` values of the set."""
    last: Int

    """
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    """
    offset: Int

    """The method to use when ordering \`OtherChild\`."""
    orderBy: [OtherChildrenOrderBy!] = [PRIMARY_KEY_ASC]
  ): OtherChildrenConnection

  """Reads a set of \`OtherChild\`."""
  allOtherChildrenList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OtherChildCondition

    """Only read the first \`n\` values of the set."""
    first: Int

    """
    Indicates whether draft items should be included in the results or not.
    """
    includeWhenParentByParentIdDraft: IncludeDraftOption = NO

    """Skip the first \`n\` values."""
    offset: Int

    """The method to use when ordering \`OtherChild\`."""
    orderBy: [OtherChildrenOrderBy!]
  ): [OtherChild!]

  """Reads and enables pagination through a set of \`Parent\`."""
  allParents(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ParentCondition

    """Only read the first \`n\` values of the set."""
    first: Int

    """
    Indicates whether draft items should be included in the results or not.
    """
    includeDraft: IncludeDraftOption = NO

    """Only read the last \`n\` values of the set."""
    last: Int

    """
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    """
    offset: Int

    """The method to use when ordering \`Parent\`."""
    orderBy: [ParentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ParentsConnection

  """Reads a set of \`Parent\`."""
  allParentsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ParentCondition

    """Only read the first \`n\` values of the set."""
    first: Int

    """
    Indicates whether draft items should be included in the results or not.
    """
    includeDraft: IncludeDraftOption = NO

    """Skip the first \`n\` values."""
    offset: Int

    """The method to use when ordering \`Parent\`."""
    orderBy: [ParentsOrderBy!]
  ): [Parent!]

  """Reads a single \`Child\` using its globally unique \`ID\`."""
  child(
    """The globally unique \`ID\` to be used in selecting a single \`Child\`."""
    nodeId: ID!
  ): Child
  childById(id: Int!): Child

  """Fetches an object given its globally unique \`ID\`."""
  node(
    """The globally unique \`ID\`."""
    nodeId: ID!
  ): Node

  """
  The root query type must be a \`Node\` to work well with Relay 1 mutations. This just resolves to \`query\`.
  """
  nodeId: ID!

  """Reads a single \`Organization\` using its globally unique \`ID\`."""
  organization(
    """
    The globally unique \`ID\` to be used in selecting a single \`Organization\`.
    """
    nodeId: ID!
  ): Organization
  organizationById(id: Int!): Organization

  """Reads a single \`OtherChild\` using its globally unique \`ID\`."""
  otherChild(
    """
    The globally unique \`ID\` to be used in selecting a single \`OtherChild\`.
    """
    nodeId: ID!
  ): OtherChild
  otherChildById(id: Int!): OtherChild

  """Reads a single \`Parent\` using its globally unique \`ID\`."""
  parent(
    """The globally unique \`ID\` to be used in selecting a single \`Parent\`."""
    nodeId: ID!
  ): Parent
  parentById(id: Int!): Parent

  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!
}

"""All input for the \`updateChildById\` mutation."""
input UpdateChildByIdInput {
  """
  An object where the defined keys will be set on the \`Child\` being updated.
  """
  childPatch: ChildPatch!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the \`updateChild\` mutation."""
input UpdateChildInput {
  """
  An object where the defined keys will be set on the \`Child\` being updated.
  """
  childPatch: ChildPatch!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique \`ID\` which will identify a single \`Child\` to be updated.
  """
  nodeId: ID!
}

"""The output of our update \`Child\` mutation."""
type UpdateChildPayload {
  """The \`Child\` that was updated by this mutation."""
  child: Child

  """An edge for our \`Child\`. May be used by Relay 1."""
  childEdge(
    """The method to use when ordering \`Child\`."""
    orderBy: [ChildrenOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChildrenEdge

  """
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single \`Organization\` that is related to this \`Child\`."""
  organizationByOrganizationId: Organization

  """Reads a single \`Parent\` that is related to this \`Child\`."""
  parentByParentId: Parent

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the \`updateOrganizationById\` mutation."""
input UpdateOrganizationByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the \`Organization\` being updated.
  """
  organizationPatch: OrganizationPatch!
}

"""All input for the \`updateOrganization\` mutation."""
input UpdateOrganizationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique \`ID\` which will identify a single \`Organization\` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the \`Organization\` being updated.
  """
  organizationPatch: OrganizationPatch!
}

"""The output of our update \`Organization\` mutation."""
type UpdateOrganizationPayload {
  """
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The \`Organization\` that was updated by this mutation."""
  organization: Organization

  """An edge for our \`Organization\`. May be used by Relay 1."""
  organizationEdge(
    """The method to use when ordering \`Organization\`."""
    orderBy: [OrganizationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganizationsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the \`updateOtherChildById\` mutation."""
input UpdateOtherChildByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the \`OtherChild\` being updated.
  """
  otherChildPatch: OtherChildPatch!
}

"""All input for the \`updateOtherChild\` mutation."""
input UpdateOtherChildInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique \`ID\` which will identify a single \`OtherChild\` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the \`OtherChild\` being updated.
  """
  otherChildPatch: OtherChildPatch!
}

"""The output of our update \`OtherChild\` mutation."""
type UpdateOtherChildPayload {
  """
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The \`OtherChild\` that was updated by this mutation."""
  otherChild: OtherChild

  """An edge for our \`OtherChild\`. May be used by Relay 1."""
  otherChildEdge(
    """The method to use when ordering \`OtherChild\`."""
    orderBy: [OtherChildrenOrderBy!] = [PRIMARY_KEY_ASC]
  ): OtherChildrenEdge

  """Reads a single \`Parent\` that is related to this \`OtherChild\`."""
  parentByParentId: Parent

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the \`updateParentById\` mutation."""
input UpdateParentByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the \`Parent\` being updated.
  """
  parentPatch: ParentPatch!
}

"""All input for the \`updateParent\` mutation."""
input UpdateParentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique \`ID\` which will identify a single \`Parent\` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the \`Parent\` being updated.
  """
  parentPatch: ParentPatch!
}

"""The output of our update \`Parent\` mutation."""
type UpdateParentPayload {
  """
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The \`Parent\` that was updated by this mutation."""
  parent: Parent

  """An edge for our \`Parent\`. May be used by Relay 1."""
  parentEdge(
    """The method to use when ordering \`Parent\`."""
    orderBy: [ParentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ParentsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

`;

exports[`status schema matches snapshot 1`] = `
type Child implements Node {
  archivedAt: Datetime
  id: Int!
  isArchived: Boolean!
  isPublished: Boolean!
  name: String

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads a single \`Organization\` that is related to this \`Child\`."""
  organizationByOrganizationId: Organization
  organizationId: Int!

  """Reads a single \`Parent\` that is related to this \`Child\`."""
  parentByParentId: Parent
  parentId: Int!
  publishedAt: Datetime
  status: String!
}

"""
A condition to be used against \`Child\` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ChildCondition {
  """Checks for equality with the object’s \`archivedAt\` field."""
  archivedAt: Datetime

  """Checks for equality with the object’s \`id\` field."""
  id: Int

  """Checks for equality with the object’s \`isArchived\` field."""
  isArchived: Boolean

  """Checks for equality with the object’s \`isPublished\` field."""
  isPublished: Boolean

  """Checks for equality with the object’s \`name\` field."""
  name: String

  """Checks for equality with the object’s \`organizationId\` field."""
  organizationId: Int

  """Checks for equality with the object’s \`parentId\` field."""
  parentId: Int

  """Checks for equality with the object’s \`publishedAt\` field."""
  publishedAt: Datetime

  """Checks for equality with the object’s \`status\` field."""
  status: String
}

"""An input for mutations affecting \`Child\`"""
input ChildInput {
  archivedAt: Datetime
  id: Int!
  isArchived: Boolean
  isPublished: Boolean
  name: String
  organizationId: Int!
  parentId: Int!
  publishedAt: Datetime
  status: String!
}

"""
Represents an update to a \`Child\`. Fields that are set will be updated.
"""
input ChildPatch {
  archivedAt: Datetime
  id: Int
  isArchived: Boolean
  isPublished: Boolean
  name: String
  organizationId: Int
  parentId: Int
  publishedAt: Datetime
  status: String
}

"""A connection to a list of \`Child\` values."""
type ChildrenConnection {
  """
  A list of edges which contains the \`Child\` and cursor to aid in pagination.
  """
  edges: [ChildrenEdge!]!

  """A list of \`Child\` objects."""
  nodes: [Child]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* \`Child\` you could get from the connection."""
  totalCount: Int!
}

"""A \`Child\` edge in the connection."""
type ChildrenEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The \`Child\` at the end of the edge."""
  node: Child
}

"""Methods to use when ordering \`Child\`."""
enum ChildrenOrderBy {
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  ID_ASC
  ID_DESC
  IS_ARCHIVED_ASC
  IS_ARCHIVED_DESC
  IS_PUBLISHED_ASC
  IS_PUBLISHED_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  ORGANIZATION_ID_ASC
  ORGANIZATION_ID_DESC
  PARENT_ID_ASC
  PARENT_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PUBLISHED_AT_ASC
  PUBLISHED_AT_DESC
  STATUS_ASC
  STATUS_DESC
}

"""All input for the create \`Child\` mutation."""
input CreateChildInput {
  """The \`Child\` to be created by this mutation."""
  child: ChildInput!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our create \`Child\` mutation."""
type CreateChildPayload {
  """The \`Child\` that was created by this mutation."""
  child: Child

  """An edge for our \`Child\`. May be used by Relay 1."""
  childEdge(
    """The method to use when ordering \`Child\`."""
    orderBy: [ChildrenOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChildrenEdge

  """
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single \`Organization\` that is related to this \`Child\`."""
  organizationByOrganizationId: Organization

  """Reads a single \`Parent\` that is related to this \`Child\`."""
  parentByParentId: Parent

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create \`Organization\` mutation."""
input CreateOrganizationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The \`Organization\` to be created by this mutation."""
  organization: OrganizationInput!
}

"""The output of our create \`Organization\` mutation."""
type CreateOrganizationPayload {
  """
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The \`Organization\` that was created by this mutation."""
  organization: Organization

  """An edge for our \`Organization\`. May be used by Relay 1."""
  organizationEdge(
    """The method to use when ordering \`Organization\`."""
    orderBy: [OrganizationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganizationsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create \`OtherChild\` mutation."""
input CreateOtherChildInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The \`OtherChild\` to be created by this mutation."""
  otherChild: OtherChildInput!
}

"""The output of our create \`OtherChild\` mutation."""
type CreateOtherChildPayload {
  """
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The \`OtherChild\` that was created by this mutation."""
  otherChild: OtherChild

  """An edge for our \`OtherChild\`. May be used by Relay 1."""
  otherChildEdge(
    """The method to use when ordering \`OtherChild\`."""
    orderBy: [OtherChildrenOrderBy!] = [PRIMARY_KEY_ASC]
  ): OtherChildrenEdge

  """Reads a single \`Parent\` that is related to this \`OtherChild\`."""
  parentByParentId: Parent

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create \`Parent\` mutation."""
input CreateParentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The \`Parent\` to be created by this mutation."""
  parent: ParentInput!
}

"""The output of our create \`Parent\` mutation."""
type CreateParentPayload {
  """
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The \`Parent\` that was created by this mutation."""
  parent: Parent

  """An edge for our \`Parent\`. May be used by Relay 1."""
  parentEdge(
    """The method to use when ordering \`Parent\`."""
    orderBy: [ParentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ParentsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

"""All input for the \`deleteChildById\` mutation."""
input DeleteChildByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the \`deleteChild\` mutation."""
input DeleteChildInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique \`ID\` which will identify a single \`Child\` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete \`Child\` mutation."""
type DeleteChildPayload {
  """The \`Child\` that was deleted by this mutation."""
  child: Child

  """An edge for our \`Child\`. May be used by Relay 1."""
  childEdge(
    """The method to use when ordering \`Child\`."""
    orderBy: [ChildrenOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChildrenEdge

  """
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedChildId: ID

  """Reads a single \`Organization\` that is related to this \`Child\`."""
  organizationByOrganizationId: Organization

  """Reads a single \`Parent\` that is related to this \`Child\`."""
  parentByParentId: Parent

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the \`deleteOrganizationById\` mutation."""
input DeleteOrganizationByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the \`deleteOrganization\` mutation."""
input DeleteOrganizationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique \`ID\` which will identify a single \`Organization\` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete \`Organization\` mutation."""
type DeleteOrganizationPayload {
  """
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedOrganizationId: ID

  """The \`Organization\` that was deleted by this mutation."""
  organization: Organization

  """An edge for our \`Organization\`. May be used by Relay 1."""
  organizationEdge(
    """The method to use when ordering \`Organization\`."""
    orderBy: [OrganizationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganizationsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the \`deleteOtherChildById\` mutation."""
input DeleteOtherChildByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the \`deleteOtherChild\` mutation."""
input DeleteOtherChildInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique \`ID\` which will identify a single \`OtherChild\` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete \`OtherChild\` mutation."""
type DeleteOtherChildPayload {
  """
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedOtherChildId: ID

  """The \`OtherChild\` that was deleted by this mutation."""
  otherChild: OtherChild

  """An edge for our \`OtherChild\`. May be used by Relay 1."""
  otherChildEdge(
    """The method to use when ordering \`OtherChild\`."""
    orderBy: [OtherChildrenOrderBy!] = [PRIMARY_KEY_ASC]
  ): OtherChildrenEdge

  """Reads a single \`Parent\` that is related to this \`OtherChild\`."""
  parentByParentId: Parent

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the \`deleteParentById\` mutation."""
input DeleteParentByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the \`deleteParent\` mutation."""
input DeleteParentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique \`ID\` which will identify a single \`Parent\` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete \`Parent\` mutation."""
type DeleteParentPayload {
  """
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedParentId: ID

  """The \`Parent\` that was deleted by this mutation."""
  parent: Parent

  """An edge for our \`Parent\`. May be used by Relay 1."""
  parentEdge(
    """The method to use when ordering \`Parent\`."""
    orderBy: [ParentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ParentsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
Indicates whether statusArchived items should be included in the results or not.
"""
enum IncludeStatusArchivedOption {
  """
  Only include statusArchived items (i.e. exclude non-statusArchived items).
  """
  EXCLUSIVELY

  """
  If there is a parent GraphQL record and it is statusArchived then this is
  equivalent to YES, in all other cases this is equivalent to NO.
  """
  INHERIT

  """Exclude statusArchived items."""
  NO

  """Include statusArchived items."""
  YES
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single \`Child\`."""
  createChild(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateChildInput!
  ): CreateChildPayload

  """Creates a single \`Organization\`."""
  createOrganization(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateOrganizationInput!
  ): CreateOrganizationPayload

  """Creates a single \`OtherChild\`."""
  createOtherChild(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateOtherChildInput!
  ): CreateOtherChildPayload

  """Creates a single \`Parent\`."""
  createParent(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateParentInput!
  ): CreateParentPayload

  """Deletes a single \`Child\` using its globally unique id."""
  deleteChild(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteChildInput!
  ): DeleteChildPayload

  """Deletes a single \`Child\` using a unique key."""
  deleteChildById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteChildByIdInput!
  ): DeleteChildPayload

  """Deletes a single \`Organization\` using its globally unique id."""
  deleteOrganization(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOrganizationInput!
  ): DeleteOrganizationPayload

  """Deletes a single \`Organization\` using a unique key."""
  deleteOrganizationById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOrganizationByIdInput!
  ): DeleteOrganizationPayload

  """Deletes a single \`OtherChild\` using its globally unique id."""
  deleteOtherChild(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOtherChildInput!
  ): DeleteOtherChildPayload

  """Deletes a single \`OtherChild\` using a unique key."""
  deleteOtherChildById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOtherChildByIdInput!
  ): DeleteOtherChildPayload

  """Deletes a single \`Parent\` using its globally unique id."""
  deleteParent(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteParentInput!
  ): DeleteParentPayload

  """Deletes a single \`Parent\` using a unique key."""
  deleteParentById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteParentByIdInput!
  ): DeleteParentPayload

  """Updates a single \`Child\` using its globally unique id and a patch."""
  updateChild(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateChildInput!
  ): UpdateChildPayload

  """Updates a single \`Child\` using a unique key and a patch."""
  updateChildById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateChildByIdInput!
  ): UpdateChildPayload

  """
  Updates a single \`Organization\` using its globally unique id and a patch.
  """
  updateOrganization(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOrganizationInput!
  ): UpdateOrganizationPayload

  """Updates a single \`Organization\` using a unique key and a patch."""
  updateOrganizationById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOrganizationByIdInput!
  ): UpdateOrganizationPayload

  """
  Updates a single \`OtherChild\` using its globally unique id and a patch.
  """
  updateOtherChild(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOtherChildInput!
  ): UpdateOtherChildPayload

  """Updates a single \`OtherChild\` using a unique key and a patch."""
  updateOtherChildById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOtherChildByIdInput!
  ): UpdateOtherChildPayload

  """Updates a single \`Parent\` using its globally unique id and a patch."""
  updateParent(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateParentInput!
  ): UpdateParentPayload

  """Updates a single \`Parent\` using a unique key and a patch."""
  updateParentById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateParentByIdInput!
  ): UpdateParentPayload
}

"""An object with a globally unique \`ID\`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

type Organization implements Node {
  archivedAt: Datetime

  """Reads and enables pagination through a set of \`Child\`."""
  childrenByOrganizationId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChildCondition

    """Only read the first \`n\` values of the set."""
    first: Int

    """
    Indicates whether statusArchived items should be included in the results or not.
    """
    includeStatusArchived: IncludeStatusArchivedOption = INHERIT

    """
    Indicates whether statusArchived items should be included in the results or not.
    """
    includeWhenOrganizationByOrganizationIdStatusArchived: IncludeStatusArchivedOption = INHERIT

    """
    Indicates whether statusArchived items should be included in the results or not.
    """
    includeWhenParentByParentIdStatusArchived: IncludeStatusArchivedOption = INHERIT

    """Only read the last \`n\` values of the set."""
    last: Int

    """
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    """
    offset: Int

    """The method to use when ordering \`Child\`."""
    orderBy: [ChildrenOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChildrenConnection!

  """Reads and enables pagination through a set of \`Child\`."""
  childrenByOrganizationIdList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChildCondition

    """Only read the first \`n\` values of the set."""
    first: Int

    """
    Indicates whether statusArchived items should be included in the results or not.
    """
    includeStatusArchived: IncludeStatusArchivedOption = INHERIT

    """
    Indicates whether statusArchived items should be included in the results or not.
    """
    includeWhenOrganizationByOrganizationIdStatusArchived: IncludeStatusArchivedOption = INHERIT

    """
    Indicates whether statusArchived items should be included in the results or not.
    """
    includeWhenParentByParentIdStatusArchived: IncludeStatusArchivedOption = INHERIT

    """Skip the first \`n\` values."""
    offset: Int

    """The method to use when ordering \`Child\`."""
    orderBy: [ChildrenOrderBy!]
  ): [Child!]!
  id: Int!
  isArchived: Boolean!
  isPublished: Boolean!
  name: String

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  publishedAt: Datetime
  status: String!
}

"""
A condition to be used against \`Organization\` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input OrganizationCondition {
  """Checks for equality with the object’s \`archivedAt\` field."""
  archivedAt: Datetime

  """Checks for equality with the object’s \`id\` field."""
  id: Int

  """Checks for equality with the object’s \`isArchived\` field."""
  isArchived: Boolean

  """Checks for equality with the object’s \`isPublished\` field."""
  isPublished: Boolean

  """Checks for equality with the object’s \`name\` field."""
  name: String

  """Checks for equality with the object’s \`publishedAt\` field."""
  publishedAt: Datetime

  """Checks for equality with the object’s \`status\` field."""
  status: String
}

"""An input for mutations affecting \`Organization\`"""
input OrganizationInput {
  archivedAt: Datetime
  id: Int!
  isArchived: Boolean
  isPublished: Boolean
  name: String
  publishedAt: Datetime
  status: String!
}

"""
Represents an update to a \`Organization\`. Fields that are set will be updated.
"""
input OrganizationPatch {
  archivedAt: Datetime
  id: Int
  isArchived: Boolean
  isPublished: Boolean
  name: String
  publishedAt: Datetime
  status: String
}

"""A connection to a list of \`Organization\` values."""
type OrganizationsConnection {
  """
  A list of edges which contains the \`Organization\` and cursor to aid in pagination.
  """
  edges: [OrganizationsEdge!]!

  """A list of \`Organization\` objects."""
  nodes: [Organization]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* \`Organization\` you could get from the connection."""
  totalCount: Int!
}

"""A \`Organization\` edge in the connection."""
type OrganizationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The \`Organization\` at the end of the edge."""
  node: Organization
}

"""Methods to use when ordering \`Organization\`."""
enum OrganizationsOrderBy {
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  ID_ASC
  ID_DESC
  IS_ARCHIVED_ASC
  IS_ARCHIVED_DESC
  IS_PUBLISHED_ASC
  IS_PUBLISHED_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PUBLISHED_AT_ASC
  PUBLISHED_AT_DESC
  STATUS_ASC
  STATUS_DESC
}

type OtherChild implements Node {
  id: Int!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads a single \`Parent\` that is related to this \`OtherChild\`."""
  parentByParentId: Parent
  parentId: Int!
  title: String
}

"""
A condition to be used against \`OtherChild\` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input OtherChildCondition {
  """Checks for equality with the object’s \`id\` field."""
  id: Int

  """Checks for equality with the object’s \`parentId\` field."""
  parentId: Int

  """Checks for equality with the object’s \`title\` field."""
  title: String
}

"""An input for mutations affecting \`OtherChild\`"""
input OtherChildInput {
  id: Int!
  parentId: Int!
  title: String
}

"""
Represents an update to a \`OtherChild\`. Fields that are set will be updated.
"""
input OtherChildPatch {
  id: Int
  parentId: Int
  title: String
}

"""A connection to a list of \`OtherChild\` values."""
type OtherChildrenConnection {
  """
  A list of edges which contains the \`OtherChild\` and cursor to aid in pagination.
  """
  edges: [OtherChildrenEdge!]!

  """A list of \`OtherChild\` objects."""
  nodes: [OtherChild]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* \`OtherChild\` you could get from the connection."""
  totalCount: Int!
}

"""A \`OtherChild\` edge in the connection."""
type OtherChildrenEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The \`OtherChild\` at the end of the edge."""
  node: OtherChild
}

"""Methods to use when ordering \`OtherChild\`."""
enum OtherChildrenOrderBy {
  ID_ASC
  ID_DESC
  NATURAL
  PARENT_ID_ASC
  PARENT_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  TITLE_ASC
  TITLE_DESC
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
}

type Parent implements Node {
  archivedAt: Datetime

  """Reads and enables pagination through a set of \`Child\`."""
  childrenByParentId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChildCondition

    """Only read the first \`n\` values of the set."""
    first: Int

    """
    Indicates whether statusArchived items should be included in the results or not.
    """
    includeStatusArchived: IncludeStatusArchivedOption = INHERIT

    """
    Indicates whether statusArchived items should be included in the results or not.
    """
    includeWhenOrganizationByOrganizationIdStatusArchived: IncludeStatusArchivedOption = INHERIT

    """
    Indicates whether statusArchived items should be included in the results or not.
    """
    includeWhenParentByParentIdStatusArchived: IncludeStatusArchivedOption = INHERIT

    """Only read the last \`n\` values of the set."""
    last: Int

    """
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    """
    offset: Int

    """The method to use when ordering \`Child\`."""
    orderBy: [ChildrenOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChildrenConnection!

  """Reads and enables pagination through a set of \`Child\`."""
  childrenByParentIdList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChildCondition

    """Only read the first \`n\` values of the set."""
    first: Int

    """
    Indicates whether statusArchived items should be included in the results or not.
    """
    includeStatusArchived: IncludeStatusArchivedOption = INHERIT

    """
    Indicates whether statusArchived items should be included in the results or not.
    """
    includeWhenOrganizationByOrganizationIdStatusArchived: IncludeStatusArchivedOption = INHERIT

    """
    Indicates whether statusArchived items should be included in the results or not.
    """
    includeWhenParentByParentIdStatusArchived: IncludeStatusArchivedOption = INHERIT

    """Skip the first \`n\` values."""
    offset: Int

    """The method to use when ordering \`Child\`."""
    orderBy: [ChildrenOrderBy!]
  ): [Child!]!
  id: Int!
  isArchived: Boolean!
  isPublished: Boolean!
  name: String

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads and enables pagination through a set of \`OtherChild\`."""
  otherChildrenByParentId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OtherChildCondition

    """Only read the first \`n\` values of the set."""
    first: Int

    """
    Indicates whether statusArchived items should be included in the results or not.
    """
    includeWhenParentByParentIdStatusArchived: IncludeStatusArchivedOption = INHERIT

    """Only read the last \`n\` values of the set."""
    last: Int

    """
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    """
    offset: Int

    """The method to use when ordering \`OtherChild\`."""
    orderBy: [OtherChildrenOrderBy!] = [PRIMARY_KEY_ASC]
  ): OtherChildrenConnection!

  """Reads and enables pagination through a set of \`OtherChild\`."""
  otherChildrenByParentIdList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OtherChildCondition

    """Only read the first \`n\` values of the set."""
    first: Int

    """
    Indicates whether statusArchived items should be included in the results or not.
    """
    includeWhenParentByParentIdStatusArchived: IncludeStatusArchivedOption = INHERIT

    """Skip the first \`n\` values."""
    offset: Int

    """The method to use when ordering \`OtherChild\`."""
    orderBy: [OtherChildrenOrderBy!]
  ): [OtherChild!]!
  publishedAt: Datetime
  status: String!
}

"""
A condition to be used against \`Parent\` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ParentCondition {
  """Checks for equality with the object’s \`archivedAt\` field."""
  archivedAt: Datetime

  """Checks for equality with the object’s \`id\` field."""
  id: Int

  """Checks for equality with the object’s \`isArchived\` field."""
  isArchived: Boolean

  """Checks for equality with the object’s \`isPublished\` field."""
  isPublished: Boolean

  """Checks for equality with the object’s \`name\` field."""
  name: String

  """Checks for equality with the object’s \`publishedAt\` field."""
  publishedAt: Datetime

  """Checks for equality with the object’s \`status\` field."""
  status: String
}

"""An input for mutations affecting \`Parent\`"""
input ParentInput {
  archivedAt: Datetime
  id: Int!
  isArchived: Boolean
  isPublished: Boolean
  name: String
  publishedAt: Datetime
  status: String!
}

"""
Represents an update to a \`Parent\`. Fields that are set will be updated.
"""
input ParentPatch {
  archivedAt: Datetime
  id: Int
  isArchived: Boolean
  isPublished: Boolean
  name: String
  publishedAt: Datetime
  status: String
}

"""A connection to a list of \`Parent\` values."""
type ParentsConnection {
  """
  A list of edges which contains the \`Parent\` and cursor to aid in pagination.
  """
  edges: [ParentsEdge!]!

  """A list of \`Parent\` objects."""
  nodes: [Parent]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* \`Parent\` you could get from the connection."""
  totalCount: Int!
}

"""A \`Parent\` edge in the connection."""
type ParentsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The \`Parent\` at the end of the edge."""
  node: Parent
}

"""Methods to use when ordering \`Parent\`."""
enum ParentsOrderBy {
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  ID_ASC
  ID_DESC
  IS_ARCHIVED_ASC
  IS_ARCHIVED_DESC
  IS_PUBLISHED_ASC
  IS_PUBLISHED_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PUBLISHED_AT_ASC
  PUBLISHED_AT_DESC
  STATUS_ASC
  STATUS_DESC
}

"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """Reads and enables pagination through a set of \`Child\`."""
  allChildren(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChildCondition

    """Only read the first \`n\` values of the set."""
    first: Int

    """
    Indicates whether statusArchived items should be included in the results or not.
    """
    includeStatusArchived: IncludeStatusArchivedOption = NO

    """
    Indicates whether statusArchived items should be included in the results or not.
    """
    includeWhenOrganizationByOrganizationIdStatusArchived: IncludeStatusArchivedOption = NO

    """
    Indicates whether statusArchived items should be included in the results or not.
    """
    includeWhenParentByParentIdStatusArchived: IncludeStatusArchivedOption = NO

    """Only read the last \`n\` values of the set."""
    last: Int

    """
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    """
    offset: Int

    """The method to use when ordering \`Child\`."""
    orderBy: [ChildrenOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChildrenConnection

  """Reads a set of \`Child\`."""
  allChildrenList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChildCondition

    """Only read the first \`n\` values of the set."""
    first: Int

    """
    Indicates whether statusArchived items should be included in the results or not.
    """
    includeStatusArchived: IncludeStatusArchivedOption = NO

    """
    Indicates whether statusArchived items should be included in the results or not.
    """
    includeWhenOrganizationByOrganizationIdStatusArchived: IncludeStatusArchivedOption = NO

    """
    Indicates whether statusArchived items should be included in the results or not.
    """
    includeWhenParentByParentIdStatusArchived: IncludeStatusArchivedOption = NO

    """Skip the first \`n\` values."""
    offset: Int

    """The method to use when ordering \`Child\`."""
    orderBy: [ChildrenOrderBy!]
  ): [Child!]

  """Reads and enables pagination through a set of \`Organization\`."""
  allOrganizations(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OrganizationCondition

    """Only read the first \`n\` values of the set."""
    first: Int

    """
    Indicates whether statusArchived items should be included in the results or not.
    """
    includeStatusArchived: IncludeStatusArchivedOption = NO

    """Only read the last \`n\` values of the set."""
    last: Int

    """
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    """
    offset: Int

    """The method to use when ordering \`Organization\`."""
    orderBy: [OrganizationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganizationsConnection

  """Reads a set of \`Organization\`."""
  allOrganizationsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OrganizationCondition

    """Only read the first \`n\` values of the set."""
    first: Int

    """
    Indicates whether statusArchived items should be included in the results or not.
    """
    includeStatusArchived: IncludeStatusArchivedOption = NO

    """Skip the first \`n\` values."""
    offset: Int

    """The method to use when ordering \`Organization\`."""
    orderBy: [OrganizationsOrderBy!]
  ): [Organization!]

  """Reads and enables pagination through a set of \`OtherChild\`."""
  allOtherChildren(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OtherChildCondition

    """Only read the first \`n\` values of the set."""
    first: Int

    """
    Indicates whether statusArchived items should be included in the results or not.
    """
    includeWhenParentByParentIdStatusArchived: IncludeStatusArchivedOption = NO

    """Only read the last \`n\` values of the set."""
    last: Int

    """
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    """
    offset: Int

    """The method to use when ordering \`OtherChild\`."""
    orderBy: [OtherChildrenOrderBy!] = [PRIMARY_KEY_ASC]
  ): OtherChildrenConnection

  """Reads a set of \`OtherChild\`."""
  allOtherChildrenList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OtherChildCondition

    """Only read the first \`n\` values of the set."""
    first: Int

    """
    Indicates whether statusArchived items should be included in the results or not.
    """
    includeWhenParentByParentIdStatusArchived: IncludeStatusArchivedOption = NO

    """Skip the first \`n\` values."""
    offset: Int

    """The method to use when ordering \`OtherChild\`."""
    orderBy: [OtherChildrenOrderBy!]
  ): [OtherChild!]

  """Reads and enables pagination through a set of \`Parent\`."""
  allParents(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ParentCondition

    """Only read the first \`n\` values of the set."""
    first: Int

    """
    Indicates whether statusArchived items should be included in the results or not.
    """
    includeStatusArchived: IncludeStatusArchivedOption = NO

    """Only read the last \`n\` values of the set."""
    last: Int

    """
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    """
    offset: Int

    """The method to use when ordering \`Parent\`."""
    orderBy: [ParentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ParentsConnection

  """Reads a set of \`Parent\`."""
  allParentsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ParentCondition

    """Only read the first \`n\` values of the set."""
    first: Int

    """
    Indicates whether statusArchived items should be included in the results or not.
    """
    includeStatusArchived: IncludeStatusArchivedOption = NO

    """Skip the first \`n\` values."""
    offset: Int

    """The method to use when ordering \`Parent\`."""
    orderBy: [ParentsOrderBy!]
  ): [Parent!]

  """Reads a single \`Child\` using its globally unique \`ID\`."""
  child(
    """The globally unique \`ID\` to be used in selecting a single \`Child\`."""
    nodeId: ID!
  ): Child
  childById(id: Int!): Child

  """Fetches an object given its globally unique \`ID\`."""
  node(
    """The globally unique \`ID\`."""
    nodeId: ID!
  ): Node

  """
  The root query type must be a \`Node\` to work well with Relay 1 mutations. This just resolves to \`query\`.
  """
  nodeId: ID!

  """Reads a single \`Organization\` using its globally unique \`ID\`."""
  organization(
    """
    The globally unique \`ID\` to be used in selecting a single \`Organization\`.
    """
    nodeId: ID!
  ): Organization
  organizationById(id: Int!): Organization

  """Reads a single \`OtherChild\` using its globally unique \`ID\`."""
  otherChild(
    """
    The globally unique \`ID\` to be used in selecting a single \`OtherChild\`.
    """
    nodeId: ID!
  ): OtherChild
  otherChildById(id: Int!): OtherChild

  """Reads a single \`Parent\` using its globally unique \`ID\`."""
  parent(
    """The globally unique \`ID\` to be used in selecting a single \`Parent\`."""
    nodeId: ID!
  ): Parent
  parentById(id: Int!): Parent

  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!
}

"""All input for the \`updateChildById\` mutation."""
input UpdateChildByIdInput {
  """
  An object where the defined keys will be set on the \`Child\` being updated.
  """
  childPatch: ChildPatch!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the \`updateChild\` mutation."""
input UpdateChildInput {
  """
  An object where the defined keys will be set on the \`Child\` being updated.
  """
  childPatch: ChildPatch!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique \`ID\` which will identify a single \`Child\` to be updated.
  """
  nodeId: ID!
}

"""The output of our update \`Child\` mutation."""
type UpdateChildPayload {
  """The \`Child\` that was updated by this mutation."""
  child: Child

  """An edge for our \`Child\`. May be used by Relay 1."""
  childEdge(
    """The method to use when ordering \`Child\`."""
    orderBy: [ChildrenOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChildrenEdge

  """
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single \`Organization\` that is related to this \`Child\`."""
  organizationByOrganizationId: Organization

  """Reads a single \`Parent\` that is related to this \`Child\`."""
  parentByParentId: Parent

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the \`updateOrganizationById\` mutation."""
input UpdateOrganizationByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the \`Organization\` being updated.
  """
  organizationPatch: OrganizationPatch!
}

"""All input for the \`updateOrganization\` mutation."""
input UpdateOrganizationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique \`ID\` which will identify a single \`Organization\` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the \`Organization\` being updated.
  """
  organizationPatch: OrganizationPatch!
}

"""The output of our update \`Organization\` mutation."""
type UpdateOrganizationPayload {
  """
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The \`Organization\` that was updated by this mutation."""
  organization: Organization

  """An edge for our \`Organization\`. May be used by Relay 1."""
  organizationEdge(
    """The method to use when ordering \`Organization\`."""
    orderBy: [OrganizationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganizationsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the \`updateOtherChildById\` mutation."""
input UpdateOtherChildByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the \`OtherChild\` being updated.
  """
  otherChildPatch: OtherChildPatch!
}

"""All input for the \`updateOtherChild\` mutation."""
input UpdateOtherChildInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique \`ID\` which will identify a single \`OtherChild\` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the \`OtherChild\` being updated.
  """
  otherChildPatch: OtherChildPatch!
}

"""The output of our update \`OtherChild\` mutation."""
type UpdateOtherChildPayload {
  """
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The \`OtherChild\` that was updated by this mutation."""
  otherChild: OtherChild

  """An edge for our \`OtherChild\`. May be used by Relay 1."""
  otherChildEdge(
    """The method to use when ordering \`OtherChild\`."""
    orderBy: [OtherChildrenOrderBy!] = [PRIMARY_KEY_ASC]
  ): OtherChildrenEdge

  """Reads a single \`Parent\` that is related to this \`OtherChild\`."""
  parentByParentId: Parent

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the \`updateParentById\` mutation."""
input UpdateParentByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the \`Parent\` being updated.
  """
  parentPatch: ParentPatch!
}

"""All input for the \`updateParent\` mutation."""
input UpdateParentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique \`ID\` which will identify a single \`Parent\` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the \`Parent\` being updated.
  """
  parentPatch: ParentPatch!
}

"""The output of our update \`Parent\` mutation."""
type UpdateParentPayload {
  """
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The \`Parent\` that was updated by this mutation."""
  parent: Parent

  """An edge for our \`Parent\`. May be used by Relay 1."""
  parentEdge(
    """The method to use when ordering \`Parent\`."""
    orderBy: [ParentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ParentsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

`;
